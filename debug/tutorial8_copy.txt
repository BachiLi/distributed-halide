cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/halide/bin:/home/psuriana/halide/non-linear-FM/bin/:/home/psuriana/halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/halide/bin/tutorial_lesson_08_scheduling_2

Evaluating producer-consumer pipeline with default schedule

Pseudo-code for the schedule:

TOP: NFM
BOTTOM: HALIDE

Evaluating producer.compute_root()

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1))

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1))

  a_copy[i].min: consumer_root.s0.x.min
  a[i].min: min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1))

  a_copy[i].max: (consumer_root.s0.x.max + 1)
  a[i].max: max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min)

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max)

  a_copy[i].min: consumer_root.s0.x.min
  a[i].min: min(min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1)), (consumer_root.s0.x.min + 1))

  a_copy[i].max: (consumer_root.s0.x.max + 1)
  a[i].max: max(max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1)), (consumer_root.s0.x.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min), (consumer_root.s0.y.min + 1))

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max), (consumer_root.s0.y.max + 1))

  a_copy[i].min: min(producer_root.s0.x.min, consumer_root.s0.x.min)
  a[i].min: min(min(min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1)), (consumer_root.s0.x.min + 1)), producer_root.s0.x.min)

  a_copy[i].max: max(producer_root.s0.x.max, (consumer_root.s0.x.max + 1))
  a[i].max: max(max(max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1)), (consumer_root.s0.x.max + 1)), producer_root.s0.x.max)

  a_copy[i].min: min(producer_root.s0.y.min, consumer_root.s0.y.min)
  a[i].min: min(min(min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min), (consumer_root.s0.y.min + 1)), producer_root.s0.y.min)

  a_copy[i].max: max(producer_root.s0.y.max, (consumer_root.s0.y.max + 1))
  a[i].max: max(max(max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max), (consumer_root.s0.y.max + 1)), producer_root.s0.y.max)

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1))

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1))

  a_copy[i].min: consumer_root.s0.x.min
  a[i].min: min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1))

  a_copy[i].max: (consumer_root.s0.x.max + 1)
  a[i].max: max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min)

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max)

  a_copy[i].min: consumer_root.s0.x.min
  a[i].min: min(min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1)), (consumer_root.s0.x.min + 1))

  a_copy[i].max: (consumer_root.s0.x.max + 1)
  a[i].max: max(max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1)), (consumer_root.s0.x.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min), (consumer_root.s0.y.min + 1))

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max), (consumer_root.s0.y.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1))

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1))

  a_copy[i].min: consumer_root.s0.x.min
  a[i].min: min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1))

  a_copy[i].max: (consumer_root.s0.x.max + 1)
  a[i].max: max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min)

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max)

  a_copy[i].min: consumer_root.s0.x.min
  a[i].min: min(min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1)), (consumer_root.s0.x.min + 1))

  a_copy[i].max: (consumer_root.s0.x.max + 1)
  a[i].max: max(max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1)), (consumer_root.s0.x.max + 1))

  a_copy[i].min: consumer_root.s0.y.min
  a[i].min: min(min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min), (consumer_root.s0.y.min + 1))

  a_copy[i].max: (consumer_root.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max), (consumer_root.s0.y.max + 1))

  a_copy[i].min: min(producer_root.s0.x.min, consumer_root.s0.x.min)
  a[i].min: min(min(min(consumer_root.s0.x.min, (consumer_root.s0.x.min + 1)), (consumer_root.s0.x.min + 1)), producer_root.s0.x.min)

  a_copy[i].max: max(producer_root.s0.x.max, (consumer_root.s0.x.max + 1))
  a[i].max: max(max(max(consumer_root.s0.x.max, (consumer_root.s0.x.max + 1)), (consumer_root.s0.x.max + 1)), producer_root.s0.x.max)

  a_copy[i].min: min(producer_root.s0.y.min, consumer_root.s0.y.min)
  a[i].min: min(min(min(min(consumer_root.s0.y.min, (consumer_root.s0.y.min + 1)), consumer_root.s0.y.min), (consumer_root.s0.y.min + 1)), producer_root.s0.y.min)

  a_copy[i].max: max(producer_root.s0.y.max, (consumer_root.s0.y.max + 1))
  a[i].max: max(max(max(max(consumer_root.s0.y.max, (consumer_root.s0.y.max + 1)), consumer_root.s0.y.max), (consumer_root.s0.y.max + 1)), producer_root.s0.y.max)
Pseudo-code for the schedule:


Evaluating producer.compute_at(consumer, y)

  a_copy[i].min: consumer_y.s0.y.min
  a[i].min: min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1))

  a_copy[i].max: (consumer_y.s0.y.max + 1)
  a[i].max: max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1))

  a_copy[i].min: consumer_y.s0.x.min
  a[i].min: min(consumer_y.s0.x.min, (consumer_y.s0.x.min + 1))

  a_copy[i].max: (consumer_y.s0.x.max + 1)
  a[i].max: max(consumer_y.s0.x.max, (consumer_y.s0.x.max + 1))

  a_copy[i].min: consumer_y.s0.y.min
  a[i].min: min(min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1)), consumer_y.s0.y.min)

  a_copy[i].max: (consumer_y.s0.y.max + 1)
  a[i].max: max(max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1)), consumer_y.s0.y.max)

  a_copy[i].min: consumer_y.s0.x.min
  a[i].min: min(min(consumer_y.s0.x.min, (consumer_y.s0.x.min + 1)), (consumer_y.s0.x.min + 1))

  a_copy[i].max: (consumer_y.s0.x.max + 1)
  a[i].max: max(max(consumer_y.s0.x.max, (consumer_y.s0.x.max + 1)), (consumer_y.s0.x.max + 1))

  a_copy[i].min: consumer_y.s0.y.min
  a[i].min: min(min(min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1)), consumer_y.s0.y.min), (consumer_y.s0.y.min + 1))

  a_copy[i].max: (consumer_y.s0.y.max + 1)
  a[i].max: max(max(max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1)), consumer_y.s0.y.max), (consumer_y.s0.y.max + 1))

  a_copy[i].min: min(producer_y.s0.x.min, consumer_y.s0.x.min)
  a[i].min: min(min(min(consumer_y.s0.x.min, (consumer_y.s0.x.min + 1)), (consumer_y.s0.x.min + 1)), producer_y.s0.x.min)

  a_copy[i].max: max(producer_y.s0.x.max, (consumer_y.s0.x.max + 1))
  a[i].max: max(max(max(consumer_y.s0.x.max, (consumer_y.s0.x.max + 1)), (consumer_y.s0.x.max + 1)), producer_y.s0.x.max)

  a_copy[i].min: min(producer_y.s0.y.min, consumer_y.s0.y.min)
  a[i].min: min(min(min(min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1)), consumer_y.s0.y.min), (consumer_y.s0.y.min + 1)), producer_y.s0.y.min)

  a_copy[i].max: max(producer_y.s0.y.max, (consumer_y.s0.y.max + 1))
  a[i].max: max(max(max(max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1)), consumer_y.s0.y.max), (consumer_y.s0.y.max + 1)), producer_y.s0.y.max)

  a_copy[i].min: consumer_y.s0.y.min
  a[i].min: min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1))

  a_copy[i].max: (consumer_y.s0.y.max + 1)
  a[i].max: max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1))

  a_copy[i].min: consumer_y.s0.x.min
  a[i].min: min(consumer_y.s0.x.min, (consumer_y.s0.x.min + 1))

  a_copy[i].max: (consumer_y.s0.x.max + 1)
  a[i].max: max(consumer_y.s0.x.max, (consumer_y.s0.x.max + 1))

  a_copy[i].min: consumer_y.s0.y.min
  a[i].min: min(min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1)), consumer_y.s0.y.min)

  a_copy[i].max: (consumer_y.s0.y.max + 1)
  a[i].max: max(max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1)), consumer_y.s0.y.max)

  a_copy[i].min: consumer_y.s0.x.min
  a[i].min: min(min(consumer_y.s0.x.min, (consumer_y.s0.x.min + 1)), (consumer_y.s0.x.min + 1))

  a_copy[i].max: (consumer_y.s0.x.max + 1)
  a[i].max: max(max(consumer_y.s0.x.max, (consumer_y.s0.x.max + 1)), (consumer_y.s0.x.max + 1))

  a_copy[i].min: consumer_y.s0.y.min
  a[i].min: min(min(min(consumer_y.s0.y.min, (consumer_y.s0.y.min + 1)), consumer_y.s0.y.min), (consumer_y.s0.y.min + 1))

  a_copy[i].max: (consumer_y.s0.y.max + 1)
  a[i].max: max(max(max(consumer_y.s0.y.max, (consumer_y.s0.y.max + 1)), consumer_y.s0.y.max), (consumer_y.s0.y.max + 1))

  a_copy[i].max: ((consumer_y.s0.x.loop_min + consumer_y.s0.x.loop_extent) + -1)
  a[i].max: ((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1)

  a_copy[i].min: consumer_y.s0.y
  a[i].min: min(consumer_y.s0.y, (consumer_y.s0.y + 1))

  a_copy[i].max: (consumer_y.s0.y + 1)
  a[i].max: max(consumer_y.s0.y, (consumer_y.s0.y + 1))

  a_copy[i].min: consumer_y.s0.x.loop_min
  a[i].min: min(consumer_y.s0.x.loop_min, (consumer_y.s0.x.loop_min + 1))

  a_copy[i].max: (consumer_y.s0.x.loop_min + consumer_y.s0.x.loop_extent)
  a[i].max: max(((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1), (((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1) + 1))

  a_copy[i].min: consumer_y.s0.y
  a[i].min: min(min(consumer_y.s0.y, (consumer_y.s0.y + 1)), consumer_y.s0.y)

  a_copy[i].max: (consumer_y.s0.y + 1)
  a[i].max: max(max(consumer_y.s0.y, (consumer_y.s0.y + 1)), consumer_y.s0.y)

  a_copy[i].min: consumer_y.s0.x.loop_min
  a[i].min: min(min(consumer_y.s0.x.loop_min, (consumer_y.s0.x.loop_min + 1)), (consumer_y.s0.x.loop_min + 1))

  a_copy[i].max: (consumer_y.s0.x.loop_min + consumer_y.s0.x.loop_extent)
  a[i].max: max(max(((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1), (((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1) + 1)), (((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1) + 1))

  a_copy[i].min: consumer_y.s0.y
  a[i].min: min(min(min(consumer_y.s0.y, (consumer_y.s0.y + 1)), consumer_y.s0.y), (consumer_y.s0.y + 1))

  a_copy[i].max: (consumer_y.s0.y + 1)
  a[i].max: max(max(max(consumer_y.s0.y, (consumer_y.s0.y + 1)), consumer_y.s0.y), (consumer_y.s0.y + 1))

  a_copy[i].min: min(producer_y.s0.x.min, consumer_y.s0.x.loop_min)
  a[i].min: min(min(min(consumer_y.s0.x.loop_min, (consumer_y.s0.x.loop_min + 1)), (consumer_y.s0.x.loop_min + 1)), producer_y.s0.x.min)

  a_copy[i].max: max(producer_y.s0.x.max, (consumer_y.s0.x.loop_min + consumer_y.s0.x.loop_extent))
  a[i].max: max(max(max(((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1), (((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1) + 1)), (((consumer_y.s0.x.loop_extent + consumer_y.s0.x.loop_min) - 1) + 1)), producer_y.s0.x.max)

  a_copy[i].min: min(producer_y.s0.y.min, consumer_y.s0.y)
  a[i].min: min(min(min(min(consumer_y.s0.y, (consumer_y.s0.y + 1)), consumer_y.s0.y), (consumer_y.s0.y + 1)), producer_y.s0.y.min)

  a_copy[i].max: max(producer_y.s0.y.max, (consumer_y.s0.y + 1))
  a[i].max: max(max(max(max(consumer_y.s0.y, (consumer_y.s0.y + 1)), consumer_y.s0.y), (consumer_y.s0.y + 1)), producer_y.s0.y.max)
Pseudo-code for the schedule:


Evaluating producer.store_root().compute_at(consumer, y)

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1))

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1))

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min)

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max)

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1)), (consumer_root_y.s0.x.min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1)), (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min), (consumer_root_y.s0.y.min + 1))

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max), (consumer_root_y.s0.y.max + 1))

  a_copy[i].min: min(producer_root_y.s0.x.min, consumer_root_y.s0.x.min)
  a[i].min: min(min(min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1)), (consumer_root_y.s0.x.min + 1)), producer_root_y.s0.x.min)

  a_copy[i].max: max(producer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1))
  a[i].max: max(max(max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1)), (consumer_root_y.s0.x.max + 1)), producer_root_y.s0.x.max)

  a_copy[i].min: min(producer_root_y.s0.y.min, consumer_root_y.s0.y.min)
  a[i].min: min(min(min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min), (consumer_root_y.s0.y.min + 1)), producer_root_y.s0.y.min)

  a_copy[i].max: max(producer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1))
  a[i].max: max(max(max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max), (consumer_root_y.s0.y.max + 1)), producer_root_y.s0.y.max)

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1))

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1))

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min)

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max)

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1)), (consumer_root_y.s0.x.min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1)), (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min), (consumer_root_y.s0.y.min + 1))

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max), (consumer_root_y.s0.y.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1))

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1))

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min)

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max)

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1)), (consumer_root_y.s0.x.min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1)), (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min), (consumer_root_y.s0.y.min + 1))

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max), (consumer_root_y.s0.y.max + 1))

  a_copy[i].min: consumer_root_y.s0.x.min
  a[i].min: min(min(min(consumer_root_y.s0.x.min, (consumer_root_y.s0.x.min + 1)), (consumer_root_y.s0.x.min + 1)), consumer_root_y.s0.x.min)

  a_copy[i].max: (consumer_root_y.s0.x.max + 1)
  a[i].max: max(max(max(consumer_root_y.s0.x.max, (consumer_root_y.s0.x.max + 1)), (consumer_root_y.s0.x.max + 1)), (consumer_root_y.s0.x.max + 1))

  a_copy[i].min: consumer_root_y.s0.y.min
  a[i].min: min(min(min(min(consumer_root_y.s0.y.min, (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min), (consumer_root_y.s0.y.min + 1)), consumer_root_y.s0.y.min)

  a_copy[i].max: (consumer_root_y.s0.y.max + 1)
  a[i].max: max(max(max(max(consumer_root_y.s0.y.max, (consumer_root_y.s0.y.max + 1)), consumer_root_y.s0.y.max), (consumer_root_y.s0.y.max + 1)), (consumer_root_y.s0.y.max + 1))

  a_copy[i].max: ((consumer_root_y.s0.x.loop_min + consumer_root_y.s0.x.loop_extent) + -1)
  a[i].max: ((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1)

  a_copy[i].min: consumer_root_y.s0.y
  a[i].min: min(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1))

  a_copy[i].max: (consumer_root_y.s0.y + 1)
  a[i].max: max(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1))

  a_copy[i].min: consumer_root_y.s0.x.loop_min
  a[i].min: min(consumer_root_y.s0.x.loop_min, (consumer_root_y.s0.x.loop_min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.loop_min + consumer_root_y.s0.x.loop_extent)
  a[i].max: max(((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1), (((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1) + 1))

  a_copy[i].min: consumer_root_y.s0.y
  a[i].min: min(min(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y)

  a_copy[i].max: (consumer_root_y.s0.y + 1)
  a[i].max: max(max(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y)

  a_copy[i].min: consumer_root_y.s0.x.loop_min
  a[i].min: min(min(consumer_root_y.s0.x.loop_min, (consumer_root_y.s0.x.loop_min + 1)), (consumer_root_y.s0.x.loop_min + 1))

  a_copy[i].max: (consumer_root_y.s0.x.loop_min + consumer_root_y.s0.x.loop_extent)
  a[i].max: max(max(((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1), (((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1) + 1)), (((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1) + 1))

  a_copy[i].min: consumer_root_y.s0.y
  a[i].min: min(min(min(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y), (consumer_root_y.s0.y + 1))

  a_copy[i].max: (consumer_root_y.s0.y + 1)
  a[i].max: max(max(max(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y), (consumer_root_y.s0.y + 1))

  a_copy[i].min: consumer_root_y.s0.x.loop_min
  a[i].min: min(min(min(consumer_root_y.s0.x.loop_min, (consumer_root_y.s0.x.loop_min + 1)), (consumer_root_y.s0.x.loop_min + 1)), consumer_root_y.s0.x.loop_min)

  a_copy[i].max: (consumer_root_y.s0.x.loop_min + consumer_root_y.s0.x.loop_extent)
  a[i].max: max(max(max(((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1), (((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1) + 1)), (((consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min) - 1) + 1)), (consumer_root_y.s0.x.loop_extent + consumer_root_y.s0.x.loop_min))

  a_copy[i].min: consumer_root_y.s0.y
  a[i].min: min(min(min(min(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y), (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y)

  a_copy[i].max: (consumer_root_y.s0.y + 1)
  a[i].max: max(max(max(max(consumer_root_y.s0.y, (consumer_root_y.s0.y + 1)), consumer_root_y.s0.y), (consumer_root_y.s0.y + 1)), (consumer_root_y.s0.y + 1))
Pseudo-code for the schedule:


Evaluating producer.store_root().compute_at(consumer, x)

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1))

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1))

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min)

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max)

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1)), (consumer_root_x.s0.x.min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1)), (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min), (consumer_root_x.s0.y.min + 1))

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max), (consumer_root_x.s0.y.max + 1))

  a_copy[i].min: min(producer_root_x.s0.x.min, consumer_root_x.s0.x.min)
  a[i].min: min(min(min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1)), (consumer_root_x.s0.x.min + 1)), producer_root_x.s0.x.min)

  a_copy[i].max: max(producer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1))
  a[i].max: max(max(max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1)), (consumer_root_x.s0.x.max + 1)), producer_root_x.s0.x.max)

  a_copy[i].min: min(producer_root_x.s0.y.min, consumer_root_x.s0.y.min)
  a[i].min: min(min(min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min), (consumer_root_x.s0.y.min + 1)), producer_root_x.s0.y.min)

  a_copy[i].max: max(producer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1))
  a[i].max: max(max(max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max), (consumer_root_x.s0.y.max + 1)), producer_root_x.s0.y.max)

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1))

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1))

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min)

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max)

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1)), (consumer_root_x.s0.x.min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1)), (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min), (consumer_root_x.s0.y.min + 1))

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max), (consumer_root_x.s0.y.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1))

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1))

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min)

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max)

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1)), (consumer_root_x.s0.x.min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1)), (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min), (consumer_root_x.s0.y.min + 1))

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max), (consumer_root_x.s0.y.max + 1))

  a_copy[i].min: consumer_root_x.s0.x.min
  a[i].min: min(min(min(consumer_root_x.s0.x.min, (consumer_root_x.s0.x.min + 1)), (consumer_root_x.s0.x.min + 1)), consumer_root_x.s0.x.min)

  a_copy[i].max: (consumer_root_x.s0.x.max + 1)
  a[i].max: max(max(max(consumer_root_x.s0.x.max, (consumer_root_x.s0.x.max + 1)), (consumer_root_x.s0.x.max + 1)), (consumer_root_x.s0.x.max + 1))

  a_copy[i].min: consumer_root_x.s0.y.min
  a[i].min: min(min(min(min(consumer_root_x.s0.y.min, (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min), (consumer_root_x.s0.y.min + 1)), consumer_root_x.s0.y.min)

  a_copy[i].max: (consumer_root_x.s0.y.max + 1)
  a[i].max: max(max(max(max(consumer_root_x.s0.y.max, (consumer_root_x.s0.y.max + 1)), consumer_root_x.s0.y.max), (consumer_root_x.s0.y.max + 1)), (consumer_root_x.s0.y.max + 1))

  a_copy[i].max: ((consumer_root_x.s0.x.loop_min + consumer_root_x.s0.x.loop_extent) + -1)
  a[i].max: ((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1)

  a_copy[i].min: consumer_root_x.s0.y
  a[i].min: min(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1))

  a_copy[i].max: (consumer_root_x.s0.y + 1)
  a[i].max: max(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1))

  a_copy[i].min: consumer_root_x.s0.x.loop_min
  a[i].min: min(consumer_root_x.s0.x.loop_min, (consumer_root_x.s0.x.loop_min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.loop_min + consumer_root_x.s0.x.loop_extent)
  a[i].max: max(((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1), (((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1) + 1))

  a_copy[i].min: consumer_root_x.s0.y
  a[i].min: min(min(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y)

  a_copy[i].max: (consumer_root_x.s0.y + 1)
  a[i].max: max(max(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y)

  a_copy[i].min: consumer_root_x.s0.x.loop_min
  a[i].min: min(min(consumer_root_x.s0.x.loop_min, (consumer_root_x.s0.x.loop_min + 1)), (consumer_root_x.s0.x.loop_min + 1))

  a_copy[i].max: (consumer_root_x.s0.x.loop_min + consumer_root_x.s0.x.loop_extent)
  a[i].max: max(max(((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1), (((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1) + 1)), (((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1) + 1))

  a_copy[i].min: consumer_root_x.s0.y
  a[i].min: min(min(min(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y), (consumer_root_x.s0.y + 1))

  a_copy[i].max: (consumer_root_x.s0.y + 1)
  a[i].max: max(max(max(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y), (consumer_root_x.s0.y + 1))

  a_copy[i].min: consumer_root_x.s0.x.loop_min
  a[i].min: min(min(min(consumer_root_x.s0.x.loop_min, (consumer_root_x.s0.x.loop_min + 1)), (consumer_root_x.s0.x.loop_min + 1)), consumer_root_x.s0.x.loop_min)

  a_copy[i].max: (consumer_root_x.s0.x.loop_min + consumer_root_x.s0.x.loop_extent)
  a[i].max: max(max(max(((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1), (((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1) + 1)), (((consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min) - 1) + 1)), (consumer_root_x.s0.x.loop_extent + consumer_root_x.s0.x.loop_min))

  a_copy[i].min: consumer_root_x.s0.y
  a[i].min: min(min(min(min(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y), (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y)

  a_copy[i].max: (consumer_root_x.s0.y + 1)
  a[i].max: max(max(max(max(consumer_root_x.s0.y, (consumer_root_x.s0.y + 1)), consumer_root_x.s0.y), (consumer_root_x.s0.y + 1)), (consumer_root_x.s0.y + 1))
Pseudo-code for the schedule:


Evaluating:
consumer.tile(x, y, x_outer, y_outer, x_inner, y_inner, 4, 4);
producer.compute_at(consumer, x_outer);

  a_copy[i].min: min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3))
  a[i].min: (min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0)

  a_copy[i].max: consumer_tile.s0.x.max
  a[i].max: (min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3)

  a_copy[i].min: min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3))
  a[i].min: min((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0), ((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0) + 1))

  a_copy[i].max: (consumer_tile.s0.y.max + 1)
  a[i].max: max((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3), ((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3) + 1))

  a_copy[i].min: min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3))
  a[i].min: min((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0), ((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0) + 1))

  a_copy[i].max: (consumer_tile.s0.x.max + 1)
  a[i].max: max((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3), ((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3) + 1))

  a_copy[i].min: min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3))
  a[i].min: min(min((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0), ((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0) + 1)), (min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0))

  a_copy[i].max: (consumer_tile.s0.y.max + 1)
  a[i].max: max(max((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3), ((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3) + 1)), (min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3))

  a_copy[i].min: min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3))
  a[i].min: min(min((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0), ((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0) + 1)), ((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0) + 1))

  a_copy[i].max: (consumer_tile.s0.x.max + 1)
  a[i].max: max(max((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3), ((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3) + 1)), ((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3) + 1))

  a_copy[i].min: min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3))
  a[i].min: min(min(min((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0), ((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0) + 1)), (min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0)), ((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0) + 1))

  a_copy[i].max: (consumer_tile.s0.y.max + 1)
  a[i].max: max(max(max((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3), ((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3) + 1)), (min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3)), ((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3) + 1))

  a_copy[i].min: min(producer_tile.s0.x.min, min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)))
  a[i].min: min(min(min((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0), ((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0) + 1)), ((min(consumer_tile.s0.x.min, (consumer_tile.s0.x.max + -3)) + 0) + 1)), producer_tile.s0.x.min)

  a_copy[i].max: max(producer_tile.s0.x.max, (consumer_tile.s0.x.max + 1))
  a[i].max: max(max(max((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3), ((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3) + 1)), ((min(((((consumer_tile.s0.x.max - consumer_tile.s0.x.min)/4)*4) + consumer_tile.s0.x.min), (consumer_tile.s0.x.max + -3)) + 3) + 1)), producer_tile.s0.x.max)

  a_copy[i].min: min(producer_tile.s0.y.min, min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)))
  a[i].min: min(min(min(min((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0), ((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0) + 1)), (min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0)), ((min(consumer_tile.s0.y.min, (consumer_tile.s0.y.max + -3)) + 0) + 1)), producer_tile.s0.y.min)

  a_copy[i].max: max(producer_tile.s0.y.max, (consumer_tile.s0.y.max + 1))
  a[i].max: max(max(max(max((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3), ((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3) + 1)), (min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3)), ((min(((((consumer_tile.s0.y.max - consumer_tile.s0.y.min)/4)*4) + consumer_tile.s0.y.min), (consumer_tile.s0.y.max + -3)) + 3) + 1)), producer_tile.s0.y.max)

  a_copy[i].min: consumer_tile.s0.y.min
  a[i].min: min(consumer_tile.s0.y.min, (consumer_tile.s0.y.min + 1))

  a_copy[i].max: (consumer_tile.s0.y.max + 1)
  a[i].max: max(consumer_tile.s0.y.max, (consumer_tile.s0.y.max + 1))

  a_copy[i].min: consumer_tile.s0.x.min
  a[i].min: min(consumer_tile.s0.x.min, (consumer_tile.s0.x.min + 1))

  a_copy[i].max: (consumer_tile.s0.x.max + 1)
  a[i].max: max(consumer_tile.s0.x.max, (consumer_tile.s0.x.max + 1))

  a_copy[i].min: consumer_tile.s0.y.min
  a[i].min: min(min(consumer_tile.s0.y.min, (consumer_tile.s0.y.min + 1)), consumer_tile.s0.y.min)

  a_copy[i].max: (consumer_tile.s0.y.max + 1)
  a[i].max: max(max(consumer_tile.s0.y.max, (consumer_tile.s0.y.max + 1)), consumer_tile.s0.y.max)

  a_copy[i].min: consumer_tile.s0.x.min
  a[i].min: min(min(consumer_tile.s0.x.min, (consumer_tile.s0.x.min + 1)), (consumer_tile.s0.x.min + 1))

  a_copy[i].max: (consumer_tile.s0.x.max + 1)
  a[i].max: max(max(consumer_tile.s0.x.max, (consumer_tile.s0.x.max + 1)), (consumer_tile.s0.x.max + 1))

  a_copy[i].min: consumer_tile.s0.y.min
  a[i].min: min(min(min(consumer_tile.s0.y.min, (consumer_tile.s0.y.min + 1)), consumer_tile.s0.y.min), (consumer_tile.s0.y.min + 1))

  a_copy[i].max: (consumer_tile.s0.y.max + 1)
  a[i].max: max(max(max(consumer_tile.s0.y.max, (consumer_tile.s0.y.max + 1)), consumer_tile.s0.y.max), (consumer_tile.s0.y.max + 1))

  a_copy[i].min: (consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.base)
  a[i].min: (consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min)

  a_copy[i].max: (((consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.loop_extent) + consumer_tile.s0.x.x_inner.base) + -1)
  a[i].max: (consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1))

  a_copy[i].min: (consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.base)
  a[i].min: min((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min), ((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min) + 1))

  a_copy[i].max: ((consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.loop_extent) + consumer_tile.s0.y.y_inner.base)
  a[i].max: max((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)), ((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)) + 1))

  a_copy[i].min: (consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.base)
  a[i].min: min((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min), ((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min) + 1))

  a_copy[i].max: ((consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.loop_extent) + consumer_tile.s0.x.x_inner.base)
  a[i].max: max((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)), ((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)) + 1))

  a_copy[i].min: (consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.base)
  a[i].min: min(min((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min), ((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min) + 1)), (consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min))

  a_copy[i].max: ((consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.loop_extent) + consumer_tile.s0.y.y_inner.base)
  a[i].max: max(max((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)), ((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)) + 1)), (consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)))

  a_copy[i].min: (consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.base)
  a[i].min: min(min((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min), ((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min) + 1)), ((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min) + 1))

  a_copy[i].max: ((consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.loop_extent) + consumer_tile.s0.x.x_inner.base)
  a[i].max: max(max((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)), ((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)) + 1)), ((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)) + 1))

  a_copy[i].min: (consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.base)
  a[i].min: min(min(min((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min), ((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min) + 1)), (consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min)), ((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min) + 1))

  a_copy[i].max: ((consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.loop_extent) + consumer_tile.s0.y.y_inner.base)
  a[i].max: max(max(max((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)), ((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)) + 1)), (consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1))), ((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)) + 1))

  a_copy[i].min: min(producer_tile.s0.x.min, (consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.base))
  a[i].min: min(min(min((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min), ((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min) + 1)), ((consumer_tile.s0.x.x_inner.base + consumer_tile.s0.x.x_inner.loop_min) + 1)), producer_tile.s0.x.min)

  a_copy[i].max: max(producer_tile.s0.x.max, ((consumer_tile.s0.x.x_inner.loop_min + consumer_tile.s0.x.x_inner.loop_extent) + consumer_tile.s0.x.x_inner.base))
  a[i].max: max(max(max((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)), ((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)) + 1)), ((consumer_tile.s0.x.x_inner.base + ((consumer_tile.s0.x.x_inner.loop_extent + consumer_tile.s0.x.x_inner.loop_min) - 1)) + 1)), producer_tile.s0.x.max)

  a_copy[i].min: min(producer_tile.s0.y.min, (consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.base))
  a[i].min: min(min(min(min((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min), ((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min) + 1)), (consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min)), ((consumer_tile.s0.y.y_inner.base + consumer_tile.s0.y.y_inner.loop_min) + 1)), producer_tile.s0.y.min)

  a_copy[i].max: max(producer_tile.s0.y.max, ((consumer_tile.s0.y.y_inner.loop_min + consumer_tile.s0.y.y_inner.loop_extent) + consumer_tile.s0.y.y_inner.base))
  a[i].max: max(max(max(max((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)), ((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)) + 1)), (consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1))), ((consumer_tile.s0.y.y_inner.base + ((consumer_tile.s0.y.y_inner.loop_extent + consumer_tile.s0.y.y_inner.loop_min) - 1)) + 1)), producer_tile.s0.y.max)
Pseudo-code for the schedule:


  a_copy[i].min: min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3))
  a[i].min: (min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0)

  a_copy[i].max: consumer_mixed.s0.x.max
  a[i].max: (min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3)

  a_copy[i].min: min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15))
  a[i].min: min((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0), ((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0) + 1))

  a_copy[i].max: (consumer_mixed.s0.y.max + 1)
  a[i].max: max((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15), ((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15) + 1))

  a_copy[i].min: min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3))
  a[i].min: min((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0), ((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0) + 1))

  a_copy[i].max: (consumer_mixed.s0.x.max + 1)
  a[i].max: max((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3), ((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3) + 1))

  a_copy[i].min: min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15))
  a[i].min: min(min((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0), ((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0) + 1)), (min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0))

  a_copy[i].max: (consumer_mixed.s0.y.max + 1)
  a[i].max: max(max((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15), ((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15) + 1)), (min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15))

  a_copy[i].min: min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3))
  a[i].min: min(min((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0), ((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0) + 1)), ((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0) + 1))

  a_copy[i].max: (consumer_mixed.s0.x.max + 1)
  a[i].max: max(max((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3), ((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3) + 1)), ((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3) + 1))

  a_copy[i].min: min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15))
  a[i].min: min(min(min((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0), ((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0) + 1)), (min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0)), ((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0) + 1))

  a_copy[i].max: (consumer_mixed.s0.y.max + 1)
  a[i].max: max(max(max((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15), ((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15) + 1)), (min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15)), ((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15) + 1))

  a_copy[i].min: min(producer_mixed.s0.x.min, min(consumer_mixed.s0.x.min, (min(producer_mixed.s0.x.max, consumer_mixed.s0.x.max) + -3)))
  a[i].min: min(min(min((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0), ((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0) + 1)), ((min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.max + -3)) + 0) + 1)), (min(producer_mixed.s0.x.min, (producer_mixed.s0.x.max + -3)) + 0))

  a_copy[i].max: max(producer_mixed.s0.x.max, (consumer_mixed.s0.x.max + 1))
  a[i].max: max(max(max((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3), ((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3) + 1)), ((min(((((consumer_mixed.s0.x.max - consumer_mixed.s0.x.min)/4)*4) + consumer_mixed.s0.x.min), (consumer_mixed.s0.x.max + -3)) + 3) + 1)), (min(((((producer_mixed.s0.x.max - producer_mixed.s0.x.min)/4)*4) + producer_mixed.s0.x.min), (producer_mixed.s0.x.max + -3)) + 3))

  a_copy[i].min: min(producer_mixed.s0.y.min, min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)))
  a[i].min: min(min(min(min((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0), ((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0) + 1)), (min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0)), ((min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.max + -15)) + 0) + 1)), producer_mixed.s0.y.min)

  a_copy[i].max: max(producer_mixed.s0.y.max, (consumer_mixed.s0.y.max + 1))
  a[i].max: max(max(max(max((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15), ((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15) + 1)), (min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15)), ((min(((((consumer_mixed.s0.y.max - consumer_mixed.s0.y.min)/16)*16) + consumer_mixed.s0.y.min), (consumer_mixed.s0.y.max + -15)) + 15) + 1)), producer_mixed.s0.y.max)

  a_copy[i].min: consumer_mixed.s0.y.min
  a[i].min: min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.min + 1))

  a_copy[i].max: (consumer_mixed.s0.y.max + 1)
  a[i].max: max(consumer_mixed.s0.y.max, (consumer_mixed.s0.y.max + 1))

  a_copy[i].min: consumer_mixed.s0.x.min
  a[i].min: min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.min + 1))

  a_copy[i].max: (consumer_mixed.s0.x.max + 1)
  a[i].max: max(consumer_mixed.s0.x.max, (consumer_mixed.s0.x.max + 1))

  a_copy[i].min: consumer_mixed.s0.y.min
  a[i].min: min(min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.min + 1)), consumer_mixed.s0.y.min)

  a_copy[i].max: (consumer_mixed.s0.y.max + 1)
  a[i].max: max(max(consumer_mixed.s0.y.max, (consumer_mixed.s0.y.max + 1)), consumer_mixed.s0.y.max)

  a_copy[i].min: consumer_mixed.s0.x.min
  a[i].min: min(min(consumer_mixed.s0.x.min, (consumer_mixed.s0.x.min + 1)), (consumer_mixed.s0.x.min + 1))

  a_copy[i].max: (consumer_mixed.s0.x.max + 1)
  a[i].max: max(max(consumer_mixed.s0.x.max, (consumer_mixed.s0.x.max + 1)), (consumer_mixed.s0.x.max + 1))

  a_copy[i].min: consumer_mixed.s0.y.min
  a[i].min: min(min(min(consumer_mixed.s0.y.min, (consumer_mixed.s0.y.min + 1)), consumer_mixed.s0.y.min), (consumer_mixed.s0.y.min + 1))

  a_copy[i].max: (consumer_mixed.s0.y.max + 1)
  a[i].max: max(max(max(consumer_mixed.s0.y.max, (consumer_mixed.s0.y.max + 1)), consumer_mixed.s0.y.max), (consumer_mixed.s0.y.max + 1))

  a_copy[i].min: min(((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)), ((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_max) + -3))
  a[i].min: (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)

  a_copy[i].max: min((((((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)) + (consumer_mixed.s0.x.x.loop_extent*4)) + -5), (((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_max) + -4))
  a[i].max: (min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1))

  a_copy[i].min: (consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.base)
  a[i].min: min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min) + 1))

  a_copy[i].max: ((consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.loop_extent) + consumer_mixed.s0.y.yi.base)
  a[i].max: max((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)), ((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)) + 1))

  a_copy[i].min: min(((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)), ((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_max) + -3))
  a[i].min: min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min) + 1))

  a_copy[i].max: min((((((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)) + (consumer_mixed.s0.x.x.loop_extent*4)) + -4), (((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_max) + -3))
  a[i].max: max((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)) + 1))

  a_copy[i].min: (consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.base)
  a[i].min: min(min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min))

  a_copy[i].max: ((consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.loop_extent) + consumer_mixed.s0.y.yi.base)
  a[i].max: max(max((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)), ((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)) + 1)), (consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)))

  a_copy[i].min: min(((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)), ((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_max) + -3))
  a[i].min: min(min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min) + 1)), ((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min) + 1))

  a_copy[i].max: min((((((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)) + (consumer_mixed.s0.x.x.loop_extent*4)) + -4), (((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_max) + -3))
  a[i].max: max(max((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)) + 1)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)) + 1))

  a_copy[i].min: (consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.base)
  a[i].min: min(min(min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min)), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min) + 1))

  a_copy[i].max: ((consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.loop_extent) + consumer_mixed.s0.y.yi.base)
  a[i].max: max(max(max((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)), ((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)) + 1)), (consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1))), ((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)) + 1))

  a_copy[i].min: select((((((7 - (consumer_mixed.s0.x.x.loop_extent*4)) <= consumer_mixed.s0.x.v0.loop_extent) && ((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + 3) <= consumer_mixed.s0.x.loop_max)) && (((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_extent*4)) + -1) <= consumer_mixed.s0.x.loop_max)) || (((((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) - consumer_mixed.s0.x.loop_max) + 6) <= consumer_mixed.s0.x.v0.loop_extent) && ((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + 3) <= consumer_mixed.s0.x.loop_max)) && ((((2 - (consumer_mixed.s0.x.x.loop_min*4)) - consumer_mixed.s0.x.loop_min) + consumer_mixed.s0.x.loop_max) <= (consumer_mixed.s0.x.x.loop_extent*4)))), (let t37 = ((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)) in t37), select((((((consumer_mixed.s0.x.v0.loop_extent + -6) <= (consumer_mixed.s0.x.x.loop_extent*-4)) && ((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + 3) <= consumer_mixed.s0.x.loop_max)) && (((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_extent*4)) + -1) <= consumer_mixed.s0.x.loop_max)) || ((((((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) - consumer_mixed.s0.x.loop_max) + consumer_mixed.s0.x.v0.loop_extent) + -3) <= (consumer_mixed.s0.x.x.loop_extent*-4)) && (((consumer_mixed.s0.x.loop_max - (consumer_mixed.s0.x.x.loop_min*4)) + -2) <= consumer_mixed.s0.x.loop_min)) && (((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_extent*4)) + -1) <= consumer_mixed.s0.x.loop_max))), (let t37.s = ((((consumer_mixed.s0.x.v0.loop_extent + (consumer_mixed.s0.x.x.loop_extent*4)) + consumer_mixed.s0.x.v0.loop_min) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)) in (t37.s + -7)), select((((((((-5 - (consumer_mixed.s0.x.x.loop_min*4)) - consumer_mixed.s0.x.loop_min) + consumer_mixed.s0.x.v0.loop_extent) <= (consumer_mixed.s0.x.loop_max*-1)) && ((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + 3) <= consumer_mixed.s0.x.loop_max)) && ((((2 - (consumer_mixed.s0.x.x.loop_min*4)) - consumer_mixed.s0.x.loop_min) + consumer_mixed.s0.x.loop_max) <= (consumer_mixed.s0.x.x.loop_extent*4))) || (((consumer_mixed.s0.x.v0.loop_extent <= 2) && (((consumer_mixed.s0.x.loop_max - (consumer_mixed.s0.x.x.loop_min*4)) + -2) <= consumer_mixed.s0.x.loop_min)) && ((((2 - (consumer_mixed.s0.x.x.loop_min*4)) - consumer_mixed.s0.x.loop_min) + consumer_mixed.s0.x.loop_max) <= (consumer_mixed.s0.x.x.loop_extent*4)))), (((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) + consumer_mixed.s0.x.loop_max) + -6), ((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.loop_max) + -3))))
  a[i].min: min(min(min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min) + 1)), ((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min) + 1)), (let t31 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t30 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t33 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t32 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t35 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t34 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t37 = min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (let t36 = min(((t34*4) + (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (t37 + 0))))))))))

  a_copy[i].max: select(((max((((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min) + 3), ((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -1)) <= consumer_mixed.s0.x.loop_max) || ((((consumer_mixed.s0.x.loop_max - (consumer_mixed.s0.x.x.loop_min*4)) + -2) <= consumer_mixed.s0.x.loop_min) && (((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -1) <= consumer_mixed.s0.x.loop_max))), (let t36.s = ((((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_min) + (consumer_mixed.s0.x.x.loop_min*4)) + (consumer_mixed.s0.x.x.loop_extent*4)) in (t36.s + -4)), (((consumer_mixed.s0.x.v0.loop_min + consumer_mixed.s0.x.v0.loop_extent) + consumer_mixed.s0.x.loop_max) + -3))
  a[i].max: max(max(max((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)) + 1)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min) - 1)) + 1)), (let t31 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t30 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t33 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t32 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t35 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t34 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t37 = min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (let t36 = min(((t34*4) + (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (t36 + 3))))))))))

  a_copy[i].min: (consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.base)
  a[i].min: min(min(min(min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min)), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min) + 1)), (let t31 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t30 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t33 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t32 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t35 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t34 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t37 = min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (let t36 = min(((t34*4) + (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi.loop_min))))))))))

  a_copy[i].max: ((consumer_mixed.s0.y.yi.loop_min + consumer_mixed.s0.y.yi.loop_extent) + consumer_mixed.s0.y.yi.base)
  a[i].max: max(max(max(max((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)), ((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)) + 1)), (consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1))), ((consumer_mixed.s0.y.yi.base + ((consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min) - 1)) + 1)), (let t31 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t30 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 1) in (let t33 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t32 = ((((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)) + 4)/4) in (let t35 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t34 = (((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) - (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min))/4) in (let t37 = min((min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (let t36 = min(((t34*4) + (min(((consumer_mixed.s0.x.x.loop_min*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + -3)) + consumer_mixed.s0.x.v0.loop_min)), ((min(((((consumer_mixed.s0.x.x.loop_extent + consumer_mixed.s0.x.x.loop_min)*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + (consumer_mixed.s0.x.v0.loop_extent + consumer_mixed.s0.x.v0.loop_min)) + -3)) in (consumer_mixed.s0.y.yi.base + (consumer_mixed.s0.y.yi.loop_extent + consumer_mixed.s0.y.yi.loop_min)))))))))))

  a_copy[i].min: min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3))
  a[i].min: (min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0)

  a_copy[i].max: min(((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)) + -1), consumer_mixed.s0.x.loop_max)
  a[i].max: (min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1))

  a_copy[i].min: (consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base)
  a[i].min: min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1))

  a_copy[i].max: ((consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base) + 1)
  a[i].max: max((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1))

  a_copy[i].min: min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3))
  a[i].min: min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0), ((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0) + 1))

  a_copy[i].max: max(min((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)), (consumer_mixed.s0.x.loop_max + 1)), min(((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)) + -1), consumer_mixed.s0.x.loop_max))
  a[i].max: max((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)), ((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)) + 1))

  a_copy[i].min: (consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base)
  a[i].min: min(min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi))

  a_copy[i].max: ((consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base) + 1)
  a[i].max: max(max((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi))

  a_copy[i].min: min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3))
  a[i].min: min(min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0), ((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0) + 1)), ((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0) + 1))

  a_copy[i].max: max(min((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)), (consumer_mixed.s0.x.loop_max + 1)), min(((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)) + -1), consumer_mixed.s0.x.loop_max))
  a[i].max: max(max((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)), ((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)) + 1)), ((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)) + 1))

  a_copy[i].min: (consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base)
  a[i].min: min(min(min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi)), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1))

  a_copy[i].max: ((consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base) + 1)
  a[i].max: max(max(max((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi)), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1))

  a_copy[i].min: select(((((consumer_mixed.s0.x.loop_min + 3) <= consumer_mixed.s0.x.loop_max) && (0 <= (consumer_mixed.s0.x.x.loop_extent*-1))) || (((consumer_mixed.s0.x.loop_max + -2) <= consumer_mixed.s0.x.loop_min) && (((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)) + 1) <= consumer_mixed.s0.x.loop_max))), (((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -3), select(((((((consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)) + -1) <= consumer_mixed.s0.x.loop_max) && ((consumer_mixed.s0.x.loop_max + -2) <= consumer_mixed.s0.x.loop_min)) && ((consumer_mixed.s0.x.loop_max - consumer_mixed.s0.x.loop_min) <= (consumer_mixed.s0.x.x.loop_extent*4))) || ((((consumer_mixed.s0.x.loop_max - consumer_mixed.s0.x.loop_min) + 2) <= (consumer_mixed.s0.x.x.loop_extent*4)) && ((consumer_mixed.s0.x.loop_max + -2) <= consumer_mixed.s0.x.loop_min))), (consumer_mixed.s0.x.loop_max + -3), consumer_mixed.s0.x.loop_min))
  a[i].min: min(min(min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0), ((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0) + 1)), ((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + 0) + 1)), (let t41 = min(min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (let t40 = min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + (((min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) - min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)))/4)*4)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (t41 + 0))))

  a_copy[i].max: select(((max((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -1), (consumer_mixed.s0.x.loop_min + 3)) <= consumer_mixed.s0.x.loop_max) || (((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -1) <= consumer_mixed.s0.x.loop_max) && ((consumer_mixed.s0.x.loop_max + -2) <= consumer_mixed.s0.x.loop_min))), (let t40.s = (consumer_mixed.s0.x.loop_min + (consumer_mixed.s0.x.x.loop_extent*4)) in t40.s), (consumer_mixed.s0.x.loop_max + 1))
  a[i].max: max(max(max((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)), ((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)) + 1)), ((min((((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min) + -4), (consumer_mixed.s0.x.loop_max + -3)) + ((4 + 0) - 1)) + 1)), (let t41 = min(min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (let t40 = min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + (((min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) - min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)))/4)*4)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (t40 + 3))))

  a_copy[i].min: (consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base)
  a[i].min: min(min(min(min((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi)), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (let t41 = min(min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (let t40 = min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + (((min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) - min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)))/4)*4)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi))))

  a_copy[i].max: ((consumer_mixed.s0.y.yi + consumer_mixed.s0.y.yi.base) + 1)
  a[i].max: max(max(max(max((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi)), ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1)), (let t41 = min(min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in (let t40 = min((min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)) + (((min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) - min(consumer_mixed.s0.x.loop_min, (consumer_mixed.s0.x.loop_max + -3)))/4)*4)), (min(((consumer_mixed.s0.x.x.loop_extent*4) + consumer_mixed.s0.x.loop_min), (consumer_mixed.s0.x.loop_max + 1)) + -3)) in ((consumer_mixed.s0.y.yi.base + consumer_mixed.s0.y.yi) + 1))))
Pseudo-code for the schedule:

Success!

