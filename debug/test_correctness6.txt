mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/fuzz_simplify.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_fuzz_simplify -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_fuzz_simplify
Simplify fuzz test seed: 1451861762
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gameoflife.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gameoflife -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gameoflife

  a_copy[i].min: min(min((input.extent.0 + 1), 0), oneIteration.s0.x.min)
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), oneIteration.s0.x.max)
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), oneIteration.s0.y.min)
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), oneIteration.s0.y.max)
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), oneIteration.s0.y.min)
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), oneIteration.s0.y.max)
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), oneIteration.s0.x.min)
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), oneIteration.s0.x.max)
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), oneIteration.s0.x.min)
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), oneIteration.s0.x.max)
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), oneIteration.s0.y.min)
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), oneIteration.s0.y.max)
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), oneIteration.s0.x.min)
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), oneIteration.s0.x.max)
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), oneIteration.s0.y.min)
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), oneIteration.s0.y.max)
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), oneIteration.s0.y.min)
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), oneIteration.s0.y.max)
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), oneIteration.s0.x.min)
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), oneIteration.s0.x.max)
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0)), oneIteration.s0.x.min)
  a[i].min: min(oneIteration.s0.x.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0)), oneIteration.s0.x.max)
  a[i].max: max(oneIteration.s0.x.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0)), oneIteration.s0.y.min)
  a[i].min: min(oneIteration.s0.y.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0)), oneIteration.s0.y.max)
  a[i].max: max(oneIteration.s0.y.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(twoIterations.s0.x$3.min, min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(twoIterations.s0.x$3.max, max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(twoIterations.s0.y$3.min, min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(twoIterations.s0.y$3.max, max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(f0.s0.x$4.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(f0.s0.x$4.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(f0.s0.y$4.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(f0.s0.y$4.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), twoIterations.s0.x$3.min)
  a[i].min: min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), twoIterations.s0.x$3.max)
  a[i].max: max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), twoIterations.s0.y$3.min)
  a[i].min: min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), twoIterations.s0.y$3.max)
  a[i].max: max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(twoIterations.s0.x$3.min, min((input.extent.0 + 1), 0)), f0.s0.x$4.min)
  a[i].min: min(twoIterations.s0.x$3.min, min(f0.s0.x$4.min, min((input.extent.0 + 1), 0)))

  a_copy[i].max: max(max(twoIterations.s0.x$3.max, max((input.extent.0 + -1), 0)), f0.s0.x$4.max)
  a[i].max: max(twoIterations.s0.x$3.max, max(f0.s0.x$4.max, max((input.extent.0 + -1), 0)))

  a_copy[i].min: min(min(twoIterations.s0.y$3.min, min((input.extent.1 + 1), 0)), f0.s0.y$4.min)
  a[i].min: min(twoIterations.s0.y$3.min, min(f0.s0.y$4.min, min((input.extent.1 + 1), 0)))

  a_copy[i].max: max(max(twoIterations.s0.y$3.max, max((input.extent.1 + -1), 0)), f0.s0.y$4.max)
  a[i].max: max(twoIterations.s0.y$3.max, max(f0.s0.y$4.max, max((input.extent.1 + -1), 0)))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), output.s0.x$5.min)
  a[i].min: min(output.s0.x$5.min, min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), output.s0.x$5.max)
  a[i].max: max(output.s0.x$5.max, max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), output.s0.y$5.min)
  a[i].min: min(output.s0.y$5.min, min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), output.s0.y$5.max)
  a[i].max: max(output.s0.y$5.max, max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)))

  a_copy[i].min: min(life.s0.x$5.min, life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, life.s0.x$5.min)

  a_copy[i].max: max(life.s0.x$5.max, life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, life.s0.x$5.max)

  a_copy[i].min: min(life.s0.y$5.min, life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, life.s0.y$5.min)

  a_copy[i].max: max(life.s0.y$5.max, life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, life.s0.y$5.max)

  a_copy[i].max: max(life.s0.z.max, (2 - 1))
  a[i].max: max(life.s0.z.max, 1)

  a_copy[i].min: min(min(output.s0.x$5.min, min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))), min(life.s1.t.x$r.min, life.s0.x$5.min))
  a[i].min: min(output.s0.x$5.min, min(life.s1.t.x$r.min, min(life.s0.x$5.min, min((input.extent.0 + 1), 0))))

  a_copy[i].max: max(max(output.s0.x$5.max, max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))), max(life.s1.t.x$r.max, life.s0.x$5.max))
  a[i].max: max(output.s0.x$5.max, max(life.s1.t.x$r.max, max(life.s0.x$5.max, max((input.extent.0 + -1), 0))))

  a_copy[i].min: min(min(output.s0.y$5.min, min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))), min(life.s1.t.y$r.min, life.s0.y$5.min))
  a[i].min: min(output.s0.y$5.min, min(life.s1.t.y$r.min, min(life.s0.y$5.min, min((input.extent.1 + 1), 0))))

  a_copy[i].max: max(max(output.s0.y$5.max, max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))), max(life.s1.t.y$r.max, life.s0.y$5.max))
  a[i].max: max(output.s0.y$5.max, max(life.s1.t.y$r.max, max(life.s0.y$5.max, max((input.extent.1 + -1), 0))))

  a_copy[i].min: min(min(life.s0.z.min, 0), 0)
  a[i].min: min(life.s0.z.min, 0)

  a_copy[i].max: max(max(life.s0.z.max, 1), 1)
  a[i].max: max(life.s0.z.max, 1)

  a_copy[i].min: min(min((input.extent.0 + 1), 0), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), output.s0.x$5.min)
  a[i].min: min(output.s0.x$5.min, min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), output.s0.x$5.max)
  a[i].max: max(output.s0.x$5.max, max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), output.s0.y$5.min)
  a[i].min: min(output.s0.y$5.min, min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), output.s0.y$5.max)
  a[i].max: max(output.s0.y$5.max, max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)))

  a_copy[i].min: min(min((input.extent.0 + 1), 0), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max((input.extent.0 + -1), 0), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min((input.extent.1 + 1), 0), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max((input.extent.1 + -1), 0), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), min((input.extent.0 + 1), 0))
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), max((input.extent.0 + -1), 0))
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), min((input.extent.1 + 1), 0))
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), max((input.extent.1 + -1), 0))
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))

  a_copy[i].min: min(min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)), output.s0.x$5.min)
  a[i].min: min(output.s0.x$5.min, min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0)))

  a_copy[i].max: max(max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)), output.s0.x$5.max)
  a[i].max: max(output.s0.x$5.max, max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0)))

  a_copy[i].min: min(min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)), output.s0.y$5.min)
  a[i].min: min(output.s0.y$5.min, min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0)))

  a_copy[i].max: max(max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)), output.s0.y$5.max)
  a[i].max: max(output.s0.y$5.max, max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0)))

  a_copy[i].min: min(life.s0.x$5.min, life.s1.t.x$r.min)
  a[i].min: min(life.s1.t.x$r.min, life.s0.x$5.min)

  a_copy[i].max: max(life.s0.x$5.max, life.s1.t.x$r.max)
  a[i].max: max(life.s1.t.x$r.max, life.s0.x$5.max)

  a_copy[i].min: min(life.s0.y$5.min, life.s1.t.y$r.min)
  a[i].min: min(life.s1.t.y$r.min, life.s0.y$5.min)

  a_copy[i].max: max(life.s0.y$5.max, life.s1.t.y$r.max)
  a[i].max: max(life.s1.t.y$r.max, life.s0.y$5.max)

  a_copy[i].max: max(life.s0.z.max, (2 - 1))
  a[i].max: max(life.s0.z.max, 1)

  a_copy[i].min: min(min(output.s0.x$5.min, min(life.s1.t.x$r.min, min((input.extent.0 + 1), 0))), min(life.s1.t.x$r.min, life.s0.x$5.min))
  a[i].min: min(output.s0.x$5.min, min(life.s1.t.x$r.min, min(life.s0.x$5.min, min((input.extent.0 + 1), 0))))

  a_copy[i].max: max(max(output.s0.x$5.max, max(life.s1.t.x$r.max, max((input.extent.0 + -1), 0))), max(life.s1.t.x$r.max, life.s0.x$5.max))
  a[i].max: max(output.s0.x$5.max, max(life.s1.t.x$r.max, max(life.s0.x$5.max, max((input.extent.0 + -1), 0))))

  a_copy[i].min: min(min(output.s0.y$5.min, min(life.s1.t.y$r.min, min((input.extent.1 + 1), 0))), min(life.s1.t.y$r.min, life.s0.y$5.min))
  a[i].min: min(output.s0.y$5.min, min(life.s1.t.y$r.min, min(life.s0.y$5.min, min((input.extent.1 + 1), 0))))

  a_copy[i].max: max(max(output.s0.y$5.max, max(life.s1.t.y$r.max, max((input.extent.1 + -1), 0))), max(life.s1.t.y$r.max, life.s0.y$5.max))
  a[i].max: max(output.s0.y$5.max, max(life.s1.t.y$r.max, max(life.s0.y$5.max, max((input.extent.1 + -1), 0))))

  a_copy[i].min: min(min(life.s0.z.min, 0), 0)
  a[i].min: min(life.s0.z.min, 0)

  a_copy[i].max: max(max(life.s0.z.max, 1), 1)
  a[i].max: max(life.s0.z.max, 1)
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_data_flows.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_data_flows -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_data_flows
No gpu target enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_dynamic_shared.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_dynamic_shared -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_dynamic_shared
Not running test because no gpu target enabled

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_free_sync.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_free_sync -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_free_sync
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_large_alloc.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_large_alloc -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_large_alloc
Defining function...
Realizing function...
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_mixed_dimensionality.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_mixed_dimensionality -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_mixed_dimensionality
No gpu target enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_mixed_shared_mem_types.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_mixed_shared_mem_types -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_mixed_shared_mem_types
Not running test because no gpu target enabled

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_multi_device.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_multi_device -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_multi_device
One or fewer gpu targets enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_multi_kernel.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_multi_kernel -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_multi_kernel
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_non_contiguous_copy.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_non_contiguous_copy -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_non_contiguous_copy
No gpu target enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_object_lifetime.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_object_lifetime -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_object_lifetime
Not running test because no gpu target enabled

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_specialize.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_specialize -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_specialize
No gpu target enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_sum_scan.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_sum_scan -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_sum_scan
No gpu target enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_thread_barrier.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_thread_barrier -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_thread_barrier
Not running test because no gpu target enabled

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_transpose.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_transpose -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_transpose
Not running test because no gpu target enabled

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_vectorize_div_mod.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_vectorize_div_mod -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_vectorize_div_mod
No gpu target enabled. Skipping test.

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/gpu_vectorized_shared_memory.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_gpu_vectorized_shared_memory -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_gpu_vectorized_shared_memory
This test is only relevant for OpenCL targets

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/handle.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_handle -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_handle

  a_copy[i].min: min(g.s0.x.min, (min(f$2.s0.x.min, (f$2.s0.x.max + -3)) + 0))
  a[i].min: min(g.s0.x.min, min(f$2.s0.x.min, (f$2.s0.x.max + -3)))

  a_copy[i].max: max(g.s0.x.max, (min(((((f$2.s0.x.max - f$2.s0.x.min)/4)*4) + f$2.s0.x.min), (f$2.s0.x.max + -3)) + 3))
  a[i].max: max(g.s0.x.max, f$2.s0.x.max)

  a_copy[i].min: min(g.s0.x.min, (min(f$2.s0.x.min, (f$2.s0.x.max + -3)) + 0))
  a[i].min: min(g.s0.x.min, min(f$2.s0.x.min, (f$2.s0.x.max + -3)))

  a_copy[i].max: max(g.s0.x.max, (min(((((f$2.s0.x.max - f$2.s0.x.min)/4)*4) + f$2.s0.x.min), (f$2.s0.x.max + -3)) + 3))
  a[i].max: max(g.s0.x.max, f$2.s0.x.max)
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/heap_cleanup.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_heap_cleanup -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_heap_cleanup
2 2
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/hello_gpu.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_hello_gpu -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_hello_gpu
Defining function...
Realizing function...
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/histogram.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_histogram -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_histogram

  a_copy[i].max: max(max(255, 0), (g.s0.x.max + 10))
  a[i].max: max((g.s0.x.max + 10), 255)

  a_copy[i].max: max(hist.s0.x.max, max(255, 0))
  a[i].max: max(hist.s0.x.max, 255)

  a_copy[i].min: min(min((g.s0.x.min + 10), 0), min(hist.s0.x.min, 0))
  a[i].min: min(hist.s0.x.min, min((g.s0.x.min + 10), 0))

  a_copy[i].max: max(max((g.s0.x.max + 10), 255), max(hist.s0.x.max, 255))
  a[i].max: max(hist.s0.x.max, max((g.s0.x.max + 10), 255))

  a_copy[i].max: max((g.s0.x.max + 10), max(255, 0))
  a[i].max: max((g.s0.x.max + 10), 255)

  a_copy[i].max: max(max(255, 0), (g.s0.x.max + 10))
  a[i].max: max((g.s0.x.max + 10), 255)

  a_copy[i].max: max(hist.s0.x.max, max(255, 0))
  a[i].max: max(hist.s0.x.max, 255)

  a_copy[i].min: min(min((g.s0.x.min + 10), 0), min(hist.s0.x.min, 0))
  a[i].min: min(hist.s0.x.min, min((g.s0.x.min + 10), 0))

  a_copy[i].max: max(max((g.s0.x.max + 10), 255), max(hist.s0.x.max, 255))
  a[i].max: max(hist.s0.x.max, max((g.s0.x.max + 10), 255))
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/histogram_equalize.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_histogram_equalize -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_histogram_equalize

  a_copy[i].min: min(int32((uint8)0), cdf.s1.ri.x$r.min)
  a[i].min: min(cdf.s1.ri.x$r.min, 0)

  a_copy[i].max: max(int32((uint8)255), cdf.s1.ri.x$r.max)
  a[i].max: max(cdf.s1.ri.x$r.max, 255)

  a_copy[i].min: min(hist.s1.in.x$r.min, rescaled.s0.i.min)
  a[i].min: min(rescaled.s0.i.min, hist.s1.in.x$r.min)

  a_copy[i].max: max(hist.s1.in.x$r.max, rescaled.s0.i.max)
  a[i].max: max(rescaled.s0.i.max, hist.s1.in.x$r.max)

  a_copy[i].min: min(hist.s1.in.y$r.min, rescaled.s0._0.min)
  a[i].min: min(rescaled.s0._0.min, hist.s1.in.y$r.min)

  a_copy[i].max: max(hist.s1.in.y$r.max, rescaled.s0._0.max)
  a[i].max: max(rescaled.s0._0.max, hist.s1.in.y$r.max)

  a_copy[i].min: min((cdf.s1.ri.x$r.min - 1), int32((uint8)0))
  a[i].min: min((cdf.s1.ri.x$r.min + -1), 0)

  a_copy[i].max: max((cdf.s1.ri.x$r.max - 1), int32((uint8)255))
  a[i].max: max((cdf.s1.ri.x$r.max + -1), 255)

  a_copy[i].min: min(hist.s0.v1.min, int32((uint8)0))
  a[i].min: min(hist.s0.v1.min, 0)

  a_copy[i].max: max(hist.s0.v1.max, int32((uint8)255))
  a[i].max: max(hist.s0.v1.max, 255)

  a_copy[i].min: min(cdf.s0.i.min, cdf.s1.ri.x$r.min)
  a[i].min: min(cdf.s1.ri.x$r.min, cdf.s0.i.min)

  a_copy[i].max: max(cdf.s0.i.max, cdf.s1.ri.x$r.max)
  a[i].max: max(cdf.s1.ri.x$r.max, cdf.s0.i.max)

  a_copy[i].min: min(min((cdf.s1.ri.x$r.min + -1), 0), min(cdf.s1.ri.x$r.min, cdf.s0.i.min))
  a[i].min: min(cdf.s1.ri.x$r.min, min(cdf.s0.i.min, min((cdf.s1.ri.x$r.min + -1), 0)))

  a_copy[i].max: max(max((cdf.s1.ri.x$r.max + -1), 255), max(cdf.s1.ri.x$r.max, cdf.s0.i.max))
  a[i].max: max(cdf.s1.ri.x$r.max, max(cdf.s0.i.max, max((cdf.s1.ri.x$r.max + -1), 255)))

  a_copy[i].min: min(min(cdf.s1.ri.x$r.min, 0), min(hist.s0.v1.min, 0))
  a[i].min: min(hist.s0.v1.min, min(cdf.s1.ri.x$r.min, 0))

  a_copy[i].max: max(max(cdf.s1.ri.x$r.max, 255), max(hist.s0.v1.max, 255))
  a[i].max: max(hist.s0.v1.max, max(cdf.s1.ri.x$r.max, 255))

  a_copy[i].min: min(cdf.s1.ri.x$r.min, int32((uint8)0))
  a[i].min: min(cdf.s1.ri.x$r.min, 0)

  a_copy[i].max: max(cdf.s1.ri.x$r.max, int32((uint8)255))
  a[i].max: max(cdf.s1.ri.x$r.max, 255)

  a_copy[i].min: min((cdf.s1.ri.x$r.min - 1), int32((uint8)0))
  a[i].min: min((cdf.s1.ri.x$r.min + -1), 0)

  a_copy[i].max: max((cdf.s1.ri.x$r.max - 1), int32((uint8)255))
  a[i].max: max((cdf.s1.ri.x$r.max + -1), 255)

  a_copy[i].min: min(int32((uint8)0), cdf.s1.ri.x$r.min)
  a[i].min: min(cdf.s1.ri.x$r.min, 0)

  a_copy[i].max: max(int32((uint8)255), cdf.s1.ri.x$r.max)
  a[i].max: max(cdf.s1.ri.x$r.max, 255)

  a_copy[i].min: min(hist.s1.in.x$r.min, rescaled.s0.i.min)
  a[i].min: min(rescaled.s0.i.min, hist.s1.in.x$r.min)

  a_copy[i].max: max(hist.s1.in.x$r.max, rescaled.s0.i.max)
  a[i].max: max(rescaled.s0.i.max, hist.s1.in.x$r.max)

  a_copy[i].min: min(hist.s1.in.y$r.min, rescaled.s0._0.min)
  a[i].min: min(rescaled.s0._0.min, hist.s1.in.y$r.min)

  a_copy[i].max: max(hist.s1.in.y$r.max, rescaled.s0._0.max)
  a[i].max: max(rescaled.s0._0.max, hist.s1.in.y$r.max)

  a_copy[i].min: min((cdf.s1.ri.x$r.min - 1), int32((uint8)0))
  a[i].min: min((cdf.s1.ri.x$r.min + -1), 0)

  a_copy[i].max: max((cdf.s1.ri.x$r.max - 1), int32((uint8)255))
  a[i].max: max((cdf.s1.ri.x$r.max + -1), 255)

  a_copy[i].min: min(hist.s0.v1.min, int32((uint8)0))
  a[i].min: min(hist.s0.v1.min, 0)

  a_copy[i].max: max(hist.s0.v1.max, int32((uint8)255))
  a[i].max: max(hist.s0.v1.max, 255)

  a_copy[i].min: min(min(cdf.s1.ri.x$r.min, 0), min(hist.s0.v1.min, 0))
  a[i].min: min(hist.s0.v1.min, min(cdf.s1.ri.x$r.min, 0))

  a_copy[i].max: max(max(cdf.s1.ri.x$r.max, 255), max(hist.s0.v1.max, 255))
  a[i].max: max(hist.s0.v1.max, max(cdf.s1.ri.x$r.max, 255))

  a_copy[i].min: min((cdf.s1.ri.x$r.min - 1), int32((uint8)0))
  a[i].min: min((cdf.s1.ri.x$r.min + -1), 0)

  a_copy[i].max: max((cdf.s1.ri.x$r.max - 1), int32((uint8)255))
  a[i].max: max((cdf.s1.ri.x$r.max + -1), 255)

  a_copy[i].min: min(cdf.s0.i.min, cdf.s1.ri.x$r.min)
  a[i].min: min(cdf.s1.ri.x$r.min, cdf.s0.i.min)

  a_copy[i].max: max(cdf.s0.i.max, cdf.s1.ri.x$r.max)
  a[i].max: max(cdf.s1.ri.x$r.max, cdf.s0.i.max)

  a_copy[i].min: min(min((cdf.s1.ri.x$r.min + -1), 0), min(cdf.s1.ri.x$r.min, cdf.s0.i.min))
  a[i].min: min(cdf.s1.ri.x$r.min, min(cdf.s0.i.min, min((cdf.s1.ri.x$r.min + -1), 0)))

  a_copy[i].max: max(max((cdf.s1.ri.x$r.max + -1), 255), max(cdf.s1.ri.x$r.max, cdf.s0.i.max))
  a[i].max: max(cdf.s1.ri.x$r.max, max(cdf.s0.i.max, max((cdf.s1.ri.x$r.max + -1), 255)))
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/image_of_lists.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_image_of_lists -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_image_of_lists

  a_copy[i].min: min(factors.s0.x.min, factors.s1.x.min)
  a[i].min: min(factors.s1.x.min, factors.s0.x.min)

  a_copy[i].max: max(factors.s0.x.max, factors.s1.x.max)
  a[i].max: max(factors.s1.x.max, factors.s0.x.max)

  a_copy[i].min: min(factors.s1.x.min, min(factors.s1.x.min, factors.s0.x.min))
  a[i].min: min(factors.s1.x.min, factors.s0.x.min)

  a_copy[i].max: max(factors.s1.x.max, max(factors.s1.x.max, factors.s0.x.max))
  a[i].max: max(factors.s1.x.max, factors.s0.x.max)

  a_copy[i].min: min(factors.min.0, factors.s1.x.min)
  a[i].min: min(factors.s1.x.min, factors.min.0)

  a_copy[i].max: max(((factors.min.0 + factors.extent.0) - 1), factors.s1.x.max)
  a[i].max: max(factors.s1.x.max, ((factors.extent.0 + factors.min.0) + -1))
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/implicit_args.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_implicit_args -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_implicit_args

  a_copy[i].min: min(f.s0._0.min, f.s0._1.min)
  a[i].min: min(f.s0._1.min, f.s0._0.min)

  a_copy[i].max: max(f.s0._0.max, f.s0._1.max)
  a[i].max: max(f.s0._1.max, f.s0._0.max)

  a_copy[i].min: min(f.s0._0.min, f.s0._1.min)
  a[i].min: min(f.s0._1.min, f.s0._0.min)

  a_copy[i].max: max(f.s0._0.max, f.s0._1.max)
  a[i].max: max(f.s0._1.max, f.s0._0.max)

  a_copy[i].min: min(f.s0._0.min, f.s0._1.min)
  a[i].min: min(f.s0._1.min, f.s0._0.min)

  a_copy[i].max: max(f.s0._0.max, f.s0._1.max)
  a[i].max: max(f.s0._1.max, f.s0._0.max)

  a_copy[i].min: min(min(f.s0.x.min, f.s0._0.min), 1)
  a[i].min: min(f.s0.x.min, min(f.s0._0.min, 1))

  a_copy[i].max: max(max(f.s0.x.max, f.s0._0.max), 1)
  a[i].max: max(f.s0.x.max, max(f.s0._0.max, 1))

  a_copy[i].min: min(min(f.s0._1.min, f.s0._0.min), g.s0._0.min)
  a[i].min: min(g.s0._0.min, min(f.s0._1.min, f.s0._0.min))

  a_copy[i].max: max(max(f.s0._1.max, f.s0._0.max), g.s0._0.max)
  a[i].max: max(g.s0._0.max, max(f.s0._1.max, f.s0._0.max))

  a_copy[i].min: min(f.s0._0.min, f.s0._1.min)
  a[i].min: min(f.s0._1.min, f.s0._0.min)

  a_copy[i].max: max(f.s0._0.max, f.s0._1.max)
  a[i].max: max(f.s0._1.max, f.s0._0.max)

  a_copy[i].min: min(f.s0._0.min, f.s0._1.min)
  a[i].min: min(f.s0._1.min, f.s0._0.min)

  a_copy[i].max: max(f.s0._0.max, f.s0._1.max)
  a[i].max: max(f.s0._1.max, f.s0._0.max)

  a_copy[i].min: min(min(f.s0.x.min, f.s0._0.min), 1)
  a[i].min: min(f.s0.x.min, min(f.s0._0.min, 1))

  a_copy[i].max: max(max(f.s0.x.max, f.s0._0.max), 1)
  a[i].max: max(f.s0.x.max, max(f.s0._0.max, 1))

  a_copy[i].min: min(min(f.s0._1.min, f.s0._0.min), g.s0._0.min)
  a[i].min: min(g.s0._0.min, min(f.s0._1.min, f.s0._0.min))

  a_copy[i].max: max(max(f.s0._1.max, f.s0._0.max), g.s0._0.max)
  a[i].max: max(g.s0._0.max, max(f.s0._1.max, f.s0._0.max))

  a_copy[i].min: min(hairy_transpose.s0._0.min, hairy_transpose.s0.x.min)
  a[i].min: min(hairy_transpose.s0.x.min, hairy_transpose.s0._0.min)

  a_copy[i].max: max(hairy_transpose.s0._0.max, hairy_transpose.s0.x.max)
  a[i].max: max(hairy_transpose.s0.x.max, hairy_transpose.s0._0.max)

  a_copy[i].min: min(hairy_transpose.s0._0.min, hairy_transpose.s0.x.min)
  a[i].min: min(hairy_transpose.s0.x.min, hairy_transpose.s0._0.min)

  a_copy[i].max: max(hairy_transpose.s0._0.max, hairy_transpose.s0.x.max)
  a[i].max: max(hairy_transpose.s0.x.max, hairy_transpose.s0._0.max)

  a_copy[i].min: min(hairy_transpose2.s0._0.min, hairy_transpose2.s0.x.min)
  a[i].min: min(hairy_transpose2.s0.x.min, hairy_transpose2.s0._0.min)

  a_copy[i].max: max(hairy_transpose2.s0._0.max, hairy_transpose2.s0.x.max)
  a[i].max: max(hairy_transpose2.s0.x.max, hairy_transpose2.s0._0.max)

  a_copy[i].min: min(hairy_transpose2.s0._1.min, hairy_transpose2.s0.x.min)
  a[i].min: min(hairy_transpose2.s0.x.min, hairy_transpose2.s0._1.min)

  a_copy[i].max: max(hairy_transpose2.s0._1.max, hairy_transpose2.s0.x.max)
  a[i].max: max(hairy_transpose2.s0.x.max, hairy_transpose2.s0._1.max)

  a_copy[i].min: min(hairy_transpose2.s0._0.min, hairy_transpose2.s0.x.min)
  a[i].min: min(hairy_transpose2.s0.x.min, hairy_transpose2.s0._0.min)

  a_copy[i].max: max(hairy_transpose2.s0._0.max, hairy_transpose2.s0.x.max)
  a[i].max: max(hairy_transpose2.s0.x.max, hairy_transpose2.s0._0.max)

  a_copy[i].min: min(hairy_transpose2.s0._1.min, hairy_transpose2.s0.x.min)
  a[i].min: min(hairy_transpose2.s0.x.min, hairy_transpose2.s0._1.min)

  a_copy[i].max: max(hairy_transpose2.s0._1.max, hairy_transpose2.s0.x.max)
  a[i].max: max(hairy_transpose2.s0.x.max, hairy_transpose2.s0._1.max)
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/infer_arguments.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_infer_arguments -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_infer_arguments
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/inline_reduction.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_inline_reduction -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_inline_reduction

  a_copy[i].min: min((let t5 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t4 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.min)), local_variance.s0.x.min)
  a[i].min: min(sum$2.s1.x.min, local_variance.s0.x.min)

  a_copy[i].max: max((let t5 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t4 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.max)), local_variance.s0.x.max)
  a[i].max: max(sum$2.s1.x.max, local_variance.s0.x.max)

  a_copy[i].min: min((let t5 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t4 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.min)), local_variance.s0.y.min)
  a[i].min: min(sum$2.s1.y.min, local_variance.s0.y.min)

  a_copy[i].max: max((let t5 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t4 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.max)), local_variance.s0.y.max)
  a[i].max: max(sum$2.s1.y.max, local_variance.s0.y.max)

  a_copy[i].min: min(sum$2.s0.x.min, sum$2.s1.x.min)
  a[i].min: min(sum$2.s1.x.min, sum$2.s0.x.min)

  a_copy[i].max: max(sum$2.s0.x.max, sum$2.s1.x.max)
  a[i].max: max(sum$2.s1.x.max, sum$2.s0.x.max)

  a_copy[i].min: min(sum$2.s0.y.min, sum$2.s1.y.min)
  a[i].min: min(sum$2.s1.y.min, sum$2.s0.y.min)

  a_copy[i].max: max(sum$2.s0.y.max, sum$2.s1.y.max)
  a[i].max: max(sum$2.s1.y.max, sum$2.s0.y.max)

  a_copy[i].min: min(sum.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, sum.s0.x.min)

  a_copy[i].max: max(sum.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, sum.s0.x.max)

  a_copy[i].min: min(sum.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, sum.s0.y.min)

  a_copy[i].max: max(sum.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, sum.s0.y.max)

  a_copy[i].min: min(min(sum.s1.x.min, local_variance.s0.x.min), min(sum.s1.x.min, sum.s0.x.min))
  a[i].min: min(sum.s1.x.min, min(sum.s0.x.min, local_variance.s0.x.min))

  a_copy[i].max: max(max(sum.s1.x.max, local_variance.s0.x.max), max(sum.s1.x.max, sum.s0.x.max))
  a[i].max: max(sum.s1.x.max, max(sum.s0.x.max, local_variance.s0.x.max))

  a_copy[i].min: min(min(sum.s1.y.min, local_variance.s0.y.min), min(sum.s1.y.min, sum.s0.y.min))
  a[i].min: min(sum.s1.y.min, min(sum.s0.y.min, local_variance.s0.y.min))

  a_copy[i].max: max(max(sum.s1.y.max, local_variance.s0.y.max), max(sum.s1.y.max, sum.s0.y.max))
  a[i].max: max(sum.s1.y.max, max(sum.s0.y.max, local_variance.s0.y.max))

  a_copy[i].min: min(min(sum$2.s1.x.min, local_variance.s0.x.min), min(sum$2.s1.x.min, sum$2.s0.x.min))
  a[i].min: min(sum$2.s1.x.min, min(sum$2.s0.x.min, local_variance.s0.x.min))

  a_copy[i].max: max(max(sum$2.s1.x.max, local_variance.s0.x.max), max(sum$2.s1.x.max, sum$2.s0.x.max))
  a[i].max: max(sum$2.s1.x.max, max(sum$2.s0.x.max, local_variance.s0.x.max))

  a_copy[i].min: min(min(sum$2.s1.y.min, local_variance.s0.y.min), min(sum$2.s1.y.min, sum$2.s0.y.min))
  a[i].min: min(sum$2.s1.y.min, min(sum$2.s0.y.min, local_variance.s0.y.min))

  a_copy[i].max: max(max(sum$2.s1.y.max, local_variance.s0.y.max), max(sum$2.s1.y.max, sum$2.s0.y.max))
  a[i].max: max(sum$2.s1.y.max, max(sum$2.s0.y.max, local_variance.s0.y.max))

  a_copy[i].min: min(local_variance.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, local_variance.s0.x.min)

  a_copy[i].max: max(local_variance.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, local_variance.s0.x.max)

  a_copy[i].min: min(local_variance.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, local_variance.s0.y.min)

  a_copy[i].max: max(local_variance.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, local_variance.s0.y.max)

  a_copy[i].min: min(local_variance.s0.x.min, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.min)))
  a[i].min: min(sum$2.s1.x.min, local_variance.s0.x.min)

  a_copy[i].max: max(local_variance.s0.x.max, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.max)))
  a[i].max: max(sum$2.s1.x.max, local_variance.s0.x.max)

  a_copy[i].min: min(local_variance.s0.y.min, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.min)))
  a[i].min: min(sum$2.s1.y.min, local_variance.s0.y.min)

  a_copy[i].max: max(local_variance.s0.y.max, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.max)))
  a[i].max: max(sum$2.s1.y.max, local_variance.s0.y.max)

  a_copy[i].min: min(local_variance.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, local_variance.s0.x.min)

  a_copy[i].max: max(local_variance.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, local_variance.s0.x.max)

  a_copy[i].min: min(local_variance.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, local_variance.s0.y.min)

  a_copy[i].max: max(local_variance.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, local_variance.s0.y.max)

  a_copy[i].min: min(local_variance.s0.x.min, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.min)))
  a[i].min: min(sum$2.s1.x.min, local_variance.s0.x.min)

  a_copy[i].max: max(local_variance.s0.x.max, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.max)))
  a[i].max: max(sum$2.s1.x.max, local_variance.s0.x.max)

  a_copy[i].min: min(local_variance.s0.y.min, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.min)))
  a[i].min: min(sum$2.s1.y.min, local_variance.s0.y.min)

  a_copy[i].max: max(local_variance.s0.y.max, (let t8 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t7 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.max)))
  a[i].max: max(sum$2.s1.y.max, local_variance.s0.y.max)

  a_copy[i].min: min((let t10 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t9 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.min)), local_variance.s0.x)
  a[i].min: min(sum$2.s1.x.min, local_variance.s0.x)

  a_copy[i].max: max((let t10 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t9 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.x.max)), local_variance.s0.x)
  a[i].max: max(sum$2.s1.x.max, local_variance.s0.x)

  a_copy[i].min: min((let t10 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t9 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.min)), local_variance.s0.y)
  a[i].min: min(sum$2.s1.y.min, local_variance.s0.y)

  a_copy[i].max: max((let t10 = min(min(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), min(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in (let t9 = max(max(((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.min + sum$2.s1.r.x$r.min)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max))), max(((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.min + sum$2.s1.r.y$r.min)), ((sum$2.s1.x.max + sum$2.s1.r.x$r.max)*(sum$2.s1.y.max + sum$2.s1.r.y$r.max)))) in sum$2.s1.y.max)), local_variance.s0.y)
  a[i].max: max(sum$2.s1.y.max, local_variance.s0.y)

  a_copy[i].min: min(sum$2.s0.x.min, sum$2.s1.x.min)
  a[i].min: min(sum$2.s1.x.min, sum$2.s0.x.min)

  a_copy[i].max: max(sum$2.s0.x.max, sum$2.s1.x.max)
  a[i].max: max(sum$2.s1.x.max, sum$2.s0.x.max)

  a_copy[i].min: min(sum$2.s0.y.min, sum$2.s1.y.min)
  a[i].min: min(sum$2.s1.y.min, sum$2.s0.y.min)

  a_copy[i].max: max(sum$2.s0.y.max, sum$2.s1.y.max)
  a[i].max: max(sum$2.s1.y.max, sum$2.s0.y.max)

  a_copy[i].min: min(min(sum$2.s1.x.min, local_variance.s0.x), min(sum$2.s1.x.min, sum$2.s0.x.min))
  a[i].min: min(sum$2.s1.x.min, min(sum$2.s0.x.min, local_variance.s0.x))

  a_copy[i].max: max(max(sum$2.s1.x.max, local_variance.s0.x), max(sum$2.s1.x.max, sum$2.s0.x.max))
  a[i].max: max(sum$2.s1.x.max, max(sum$2.s0.x.max, local_variance.s0.x))

  a_copy[i].min: min(min(sum$2.s1.y.min, local_variance.s0.y), min(sum$2.s1.y.min, sum$2.s0.y.min))
  a[i].min: min(sum$2.s1.y.min, min(sum$2.s0.y.min, local_variance.s0.y))

  a_copy[i].max: max(max(sum$2.s1.y.max, local_variance.s0.y), max(sum$2.s1.y.max, sum$2.s0.y.max))
  a[i].max: max(sum$2.s1.y.max, max(sum$2.s0.y.max, local_variance.s0.y))

  a_copy[i].min: min(sum.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, sum.s0.x.min)

  a_copy[i].max: max(sum.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, sum.s0.x.max)

  a_copy[i].min: min(sum.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, sum.s0.y.min)

  a_copy[i].max: max(sum.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, sum.s0.y.max)

  a_copy[i].min: min(min(sum.s1.x.min, local_variance.s0.x), min(sum.s1.x.min, sum.s0.x.min))
  a[i].min: min(sum.s1.x.min, min(sum.s0.x.min, local_variance.s0.x))

  a_copy[i].max: max(max(sum.s1.x.max, local_variance.s0.x), max(sum.s1.x.max, sum.s0.x.max))
  a[i].max: max(sum.s1.x.max, max(sum.s0.x.max, local_variance.s0.x))

  a_copy[i].min: min(min(sum.s1.y.min, local_variance.s0.y), min(sum.s1.y.min, sum.s0.y.min))
  a[i].min: min(sum.s1.y.min, min(sum.s0.y.min, local_variance.s0.y))

  a_copy[i].max: max(max(sum.s1.y.max, local_variance.s0.y), max(sum.s1.y.max, sum.s0.y.max))
  a[i].max: max(sum.s1.y.max, max(sum.s0.y.max, local_variance.s0.y))

  a_copy[i].min: min(product.s1.x.min, (min(local_product.s0.x.min, (local_product.s0.x.max + -3)) + 0))
  a[i].min: min(product.s1.x.min, min(local_product.s0.x.min, (local_product.s0.x.max + -3)))

  a_copy[i].max: max(product.s1.x.max, (min(((((local_product.s0.x.max - local_product.s0.x.min)/4)*4) + local_product.s0.x.min), (local_product.s0.x.max + -3)) + 3))
  a[i].max: max(product.s1.x.max, local_product.s0.x.max)

  a_copy[i].min: min(product.s0.x.min, product.s1.x.min)
  a[i].min: min(product.s1.x.min, product.s0.x.min)

  a_copy[i].max: max(product.s0.x.max, product.s1.x.max)
  a[i].max: max(product.s1.x.max, product.s0.x.max)

  a_copy[i].min: min(product.s0.y.min, product.s1.y.min)
  a[i].min: min(product.s1.y.min, product.s0.y.min)

  a_copy[i].max: max(product.s0.y.max, product.s1.y.max)
  a[i].max: max(product.s1.y.max, product.s0.y.max)

  a_copy[i].min: min(min(product.s1.x.min, min(local_product.s0.x.min, (local_product.s0.x.max + -3))), min(product.s1.x.min, product.s0.x.min))
  a[i].min: min(product.s1.x.min, min(product.s0.x.min, min(local_product.s0.x.min, (local_product.s0.x.max + -3))))

  a_copy[i].max: max(max(product.s1.x.max, local_product.s0.x.max), max(product.s1.x.max, product.s0.x.max))
  a[i].max: max(product.s1.x.max, max(product.s0.x.max, local_product.s0.x.max))

  a_copy[i].min: min(min(product.s1.y.min, local_product.s0.y.min), min(product.s1.y.min, product.s0.y.min))
  a[i].min: min(product.s1.y.min, min(product.s0.y.min, local_product.s0.y.min))

  a_copy[i].max: max(max(product.s1.y.max, local_product.s0.y.max), max(product.s1.y.max, product.s0.y.max))
  a[i].max: max(product.s1.y.max, max(product.s0.y.max, local_product.s0.y.max))

  a_copy[i].min: min(local_product.s0.x.min, product.s1.x.min)
  a[i].min: min(product.s1.x.min, local_product.s0.x.min)

  a_copy[i].max: max(local_product.s0.x.max, product.s1.x.max)
  a[i].max: max(product.s1.x.max, local_product.s0.x.max)

  a_copy[i].min: min(local_product.s0.y.min, product.s1.y.min)
  a[i].min: min(product.s1.y.min, local_product.s0.y.min)

  a_copy[i].max: max(local_product.s0.y.max, product.s1.y.max)
  a[i].max: max(product.s1.y.max, local_product.s0.y.max)

  a_copy[i].min: min(local_product.s0.x.min, product.s1.x.min)
  a[i].min: min(product.s1.x.min, local_product.s0.x.min)

  a_copy[i].max: max(local_product.s0.x.max, product.s1.x.max)
  a[i].max: max(product.s1.x.max, local_product.s0.x.max)

  a_copy[i].min: min(local_product.s0.y.min, product.s1.y.min)
  a[i].min: min(product.s1.y.min, local_product.s0.y.min)

  a_copy[i].max: max(local_product.s0.y.max, product.s1.y.max)
  a[i].max: max(product.s1.y.max, local_product.s0.y.max)

  a_copy[i].min: min(product.s1.x.min, (local_product.s0.x.v6.base + local_product.s0.x.v6))
  a[i].min: min(product.s1.x.min, (local_product.s0.x.v6 + local_product.s0.x.v6.base))

  a_copy[i].max: max(product.s1.x.max, (local_product.s0.x.v6.base + local_product.s0.x.v6))
  a[i].max: max(product.s1.x.max, (local_product.s0.x.v6 + local_product.s0.x.v6.base))

  a_copy[i].min: min(product.s0.x.min, product.s1.x.min)
  a[i].min: min(product.s1.x.min, product.s0.x.min)

  a_copy[i].max: max(product.s0.x.max, product.s1.x.max)
  a[i].max: max(product.s1.x.max, product.s0.x.max)

  a_copy[i].min: min(product.s0.y.min, product.s1.y.min)
  a[i].min: min(product.s1.y.min, product.s0.y.min)

  a_copy[i].max: max(product.s0.y.max, product.s1.y.max)
  a[i].max: max(product.s1.y.max, product.s0.y.max)

  a_copy[i].min: min(min(product.s1.x.min, (local_product.s0.x.v6 + local_product.s0.x.v6.base)), min(product.s1.x.min, product.s0.x.min))
  a[i].min: min(product.s1.x.min, min(product.s0.x.min, (local_product.s0.x.v6.base + local_product.s0.x.v6)))

  a_copy[i].max: max(max(product.s1.x.max, (local_product.s0.x.v6 + local_product.s0.x.v6.base)), max(product.s1.x.max, product.s0.x.max))
  a[i].max: max(product.s1.x.max, max(product.s0.x.max, (local_product.s0.x.v6.base + local_product.s0.x.v6)))

  a_copy[i].min: min(min(product.s1.y.min, local_product.s0.y), min(product.s1.y.min, product.s0.y.min))
  a[i].min: min(product.s1.y.min, min(product.s0.y.min, local_product.s0.y))

  a_copy[i].max: max(max(product.s1.y.max, local_product.s0.y), max(product.s1.y.max, product.s0.y.max))
  a[i].max: max(product.s1.y.max, max(product.s0.y.max, local_product.s0.y))

  a_copy[i].min: min(maximum.s1.x.min, (min(local_max.s0.x.min, (local_max.s0.x.max + -3)) + 0))
  a[i].min: min(maximum.s1.x.min, min(local_max.s0.x.min, (local_max.s0.x.max + -3)))

  a_copy[i].max: max(maximum.s1.x.max, (min(((((local_max.s0.x.max - local_max.s0.x.min)/4)*4) + local_max.s0.x.min), (local_max.s0.x.max + -3)) + 3))
  a[i].max: max(maximum.s1.x.max, local_max.s0.x.max)

  a_copy[i].min: min(maximum.s0.x.min, maximum.s1.x.min)
  a[i].min: min(maximum.s1.x.min, maximum.s0.x.min)

  a_copy[i].max: max(maximum.s0.x.max, maximum.s1.x.max)
  a[i].max: max(maximum.s1.x.max, maximum.s0.x.max)

  a_copy[i].min: min(maximum.s0.y.min, maximum.s1.y.min)
  a[i].min: min(maximum.s1.y.min, maximum.s0.y.min)

  a_copy[i].max: max(maximum.s0.y.max, maximum.s1.y.max)
  a[i].max: max(maximum.s1.y.max, maximum.s0.y.max)

  a_copy[i].min: min(min(maximum.s1.x.min, min(local_max.s0.x.min, (local_max.s0.x.max + -3))), min(maximum.s1.x.min, maximum.s0.x.min))
  a[i].min: min(maximum.s1.x.min, min(maximum.s0.x.min, min(local_max.s0.x.min, (local_max.s0.x.max + -3))))

  a_copy[i].max: max(max(maximum.s1.x.max, local_max.s0.x.max), max(maximum.s1.x.max, maximum.s0.x.max))
  a[i].max: max(maximum.s1.x.max, max(maximum.s0.x.max, local_max.s0.x.max))

  a_copy[i].min: min(min(maximum.s1.y.min, local_max.s0.y.min), min(maximum.s1.y.min, maximum.s0.y.min))
  a[i].min: min(maximum.s1.y.min, min(maximum.s0.y.min, local_max.s0.y.min))

  a_copy[i].max: max(max(maximum.s1.y.max, local_max.s0.y.max), max(maximum.s1.y.max, maximum.s0.y.max))
  a[i].max: max(maximum.s1.y.max, max(maximum.s0.y.max, local_max.s0.y.max))

  a_copy[i].min: min(local_max.s0.x.min, maximum.s1.x.min)
  a[i].min: min(maximum.s1.x.min, local_max.s0.x.min)

  a_copy[i].max: max(local_max.s0.x.max, maximum.s1.x.max)
  a[i].max: max(maximum.s1.x.max, local_max.s0.x.max)

  a_copy[i].min: min(local_max.s0.y.min, maximum.s1.y.min)
  a[i].min: min(maximum.s1.y.min, local_max.s0.y.min)

  a_copy[i].max: max(local_max.s0.y.max, maximum.s1.y.max)
  a[i].max: max(maximum.s1.y.max, local_max.s0.y.max)

  a_copy[i].min: min(local_max.s0.x.min, maximum.s1.x.min)
  a[i].min: min(maximum.s1.x.min, local_max.s0.x.min)

  a_copy[i].max: max(local_max.s0.x.max, maximum.s1.x.max)
  a[i].max: max(maximum.s1.x.max, local_max.s0.x.max)

  a_copy[i].min: min(local_max.s0.y.min, maximum.s1.y.min)
  a[i].min: min(maximum.s1.y.min, local_max.s0.y.min)

  a_copy[i].max: max(local_max.s0.y.max, maximum.s1.y.max)
  a[i].max: max(maximum.s1.y.max, local_max.s0.y.max)

  a_copy[i].min: min(maximum.s1.x.min, (local_max.s0.x.v7.base + local_max.s0.x.v7))
  a[i].min: min(maximum.s1.x.min, (local_max.s0.x.v7 + local_max.s0.x.v7.base))

  a_copy[i].max: max(maximum.s1.x.max, (local_max.s0.x.v7.base + local_max.s0.x.v7))
  a[i].max: max(maximum.s1.x.max, (local_max.s0.x.v7 + local_max.s0.x.v7.base))

  a_copy[i].min: min(maximum.s0.x.min, maximum.s1.x.min)
  a[i].min: min(maximum.s1.x.min, maximum.s0.x.min)

  a_copy[i].max: max(maximum.s0.x.max, maximum.s1.x.max)
  a[i].max: max(maximum.s1.x.max, maximum.s0.x.max)

  a_copy[i].min: min(maximum.s0.y.min, maximum.s1.y.min)
  a[i].min: min(maximum.s1.y.min, maximum.s0.y.min)

  a_copy[i].max: max(maximum.s0.y.max, maximum.s1.y.max)
  a[i].max: max(maximum.s1.y.max, maximum.s0.y.max)

  a_copy[i].min: min(min(maximum.s1.x.min, (local_max.s0.x.v7 + local_max.s0.x.v7.base)), min(maximum.s1.x.min, maximum.s0.x.min))
  a[i].min: min(maximum.s1.x.min, min(maximum.s0.x.min, (local_max.s0.x.v7.base + local_max.s0.x.v7)))

  a_copy[i].max: max(max(maximum.s1.x.max, (local_max.s0.x.v7 + local_max.s0.x.v7.base)), max(maximum.s1.x.max, maximum.s0.x.max))
  a[i].max: max(maximum.s1.x.max, max(maximum.s0.x.max, (local_max.s0.x.v7.base + local_max.s0.x.v7)))

  a_copy[i].min: min(min(maximum.s1.y.min, local_max.s0.y), min(maximum.s1.y.min, maximum.s0.y.min))
  a[i].min: min(maximum.s1.y.min, min(maximum.s0.y.min, local_max.s0.y))

  a_copy[i].max: max(max(maximum.s1.y.max, local_max.s0.y), max(maximum.s1.y.max, maximum.s0.y.max))
  a[i].max: max(maximum.s1.y.max, max(maximum.s0.y.max, local_max.s0.y))

  a_copy[i].min: min(minimum.s1.x.min, (min(local_min.s0.x.min, (local_min.s0.x.max + -3)) + 0))
  a[i].min: min(minimum.s1.x.min, min(local_min.s0.x.min, (local_min.s0.x.max + -3)))

  a_copy[i].max: max(minimum.s1.x.max, (min(((((local_min.s0.x.max - local_min.s0.x.min)/4)*4) + local_min.s0.x.min), (local_min.s0.x.max + -3)) + 3))
  a[i].max: max(minimum.s1.x.max, local_min.s0.x.max)

  a_copy[i].min: min(minimum.s0.x.min, minimum.s1.x.min)
  a[i].min: min(minimum.s1.x.min, minimum.s0.x.min)

  a_copy[i].max: max(minimum.s0.x.max, minimum.s1.x.max)
  a[i].max: max(minimum.s1.x.max, minimum.s0.x.max)

  a_copy[i].min: min(minimum.s0.y.min, minimum.s1.y.min)
  a[i].min: min(minimum.s1.y.min, minimum.s0.y.min)

  a_copy[i].max: max(minimum.s0.y.max, minimum.s1.y.max)
  a[i].max: max(minimum.s1.y.max, minimum.s0.y.max)

  a_copy[i].min: min(min(minimum.s1.x.min, min(local_min.s0.x.min, (local_min.s0.x.max + -3))), min(minimum.s1.x.min, minimum.s0.x.min))
  a[i].min: min(minimum.s1.x.min, min(minimum.s0.x.min, min(local_min.s0.x.min, (local_min.s0.x.max + -3))))

  a_copy[i].max: max(max(minimum.s1.x.max, local_min.s0.x.max), max(minimum.s1.x.max, minimum.s0.x.max))
  a[i].max: max(minimum.s1.x.max, max(minimum.s0.x.max, local_min.s0.x.max))

  a_copy[i].min: min(min(minimum.s1.y.min, local_min.s0.y.min), min(minimum.s1.y.min, minimum.s0.y.min))
  a[i].min: min(minimum.s1.y.min, min(minimum.s0.y.min, local_min.s0.y.min))

  a_copy[i].max: max(max(minimum.s1.y.max, local_min.s0.y.max), max(minimum.s1.y.max, minimum.s0.y.max))
  a[i].max: max(minimum.s1.y.max, max(minimum.s0.y.max, local_min.s0.y.max))

  a_copy[i].min: min(local_min.s0.x.min, minimum.s1.x.min)
  a[i].min: min(minimum.s1.x.min, local_min.s0.x.min)

  a_copy[i].max: max(local_min.s0.x.max, minimum.s1.x.max)
  a[i].max: max(minimum.s1.x.max, local_min.s0.x.max)

  a_copy[i].min: min(local_min.s0.y.min, minimum.s1.y.min)
  a[i].min: min(minimum.s1.y.min, local_min.s0.y.min)

  a_copy[i].max: max(local_min.s0.y.max, minimum.s1.y.max)
  a[i].max: max(minimum.s1.y.max, local_min.s0.y.max)

  a_copy[i].min: min(local_min.s0.x.min, minimum.s1.x.min)
  a[i].min: min(minimum.s1.x.min, local_min.s0.x.min)

  a_copy[i].max: max(local_min.s0.x.max, minimum.s1.x.max)
  a[i].max: max(minimum.s1.x.max, local_min.s0.x.max)

  a_copy[i].min: min(local_min.s0.y.min, minimum.s1.y.min)
  a[i].min: min(minimum.s1.y.min, local_min.s0.y.min)

  a_copy[i].max: max(local_min.s0.y.max, minimum.s1.y.max)
  a[i].max: max(minimum.s1.y.max, local_min.s0.y.max)

  a_copy[i].min: min(minimum.s1.x.min, (local_min.s0.x.v8.base + local_min.s0.x.v8))
  a[i].min: min(minimum.s1.x.min, (local_min.s0.x.v8 + local_min.s0.x.v8.base))

  a_copy[i].max: max(minimum.s1.x.max, (local_min.s0.x.v8.base + local_min.s0.x.v8))
  a[i].max: max(minimum.s1.x.max, (local_min.s0.x.v8 + local_min.s0.x.v8.base))

  a_copy[i].min: min(minimum.s0.x.min, minimum.s1.x.min)
  a[i].min: min(minimum.s1.x.min, minimum.s0.x.min)

  a_copy[i].max: max(minimum.s0.x.max, minimum.s1.x.max)
  a[i].max: max(minimum.s1.x.max, minimum.s0.x.max)

  a_copy[i].min: min(minimum.s0.y.min, minimum.s1.y.min)
  a[i].min: min(minimum.s1.y.min, minimum.s0.y.min)

  a_copy[i].max: max(minimum.s0.y.max, minimum.s1.y.max)
  a[i].max: max(minimum.s1.y.max, minimum.s0.y.max)

  a_copy[i].min: min(min(minimum.s1.x.min, (local_min.s0.x.v8 + local_min.s0.x.v8.base)), min(minimum.s1.x.min, minimum.s0.x.min))
  a[i].min: min(minimum.s1.x.min, min(minimum.s0.x.min, (local_min.s0.x.v8.base + local_min.s0.x.v8)))

  a_copy[i].max: max(max(minimum.s1.x.max, (local_min.s0.x.v8 + local_min.s0.x.v8.base)), max(minimum.s1.x.max, minimum.s0.x.max))
  a[i].max: max(minimum.s1.x.max, max(minimum.s0.x.max, (local_min.s0.x.v8.base + local_min.s0.x.v8)))

  a_copy[i].min: min(min(minimum.s1.y.min, local_min.s0.y), min(minimum.s1.y.min, minimum.s0.y.min))
  a[i].min: min(minimum.s1.y.min, min(minimum.s0.y.min, local_min.s0.y))

  a_copy[i].max: max(max(minimum.s1.y.max, local_min.s0.y), max(minimum.s1.y.max, minimum.s0.y.max))
  a[i].max: max(minimum.s1.y.max, max(minimum.s0.y.max, local_min.s0.y))

  a_copy[i].min: min(minimum$2.s1.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, minimum$2.s1.x.min)

  a_copy[i].max: max(minimum$2.s1.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, minimum$2.s1.x.max)

  a_copy[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.y.min + minimum$3.s1.ky.x$r.min))
  a[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r.min + minimum$3.s1.y.min))

  a_copy[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.y.max + minimum$3.s1.ky.x$r.max))
  a[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r.max + minimum$3.s1.y.max))

  a_copy[i].min: min(minimum$3.s1.x.min, (min(min_y.s0.x.min, (min_y.s0.x.max + -3)) + 0))
  a[i].min: min(minimum$3.s1.x.min, min(min_y.s0.x.min, (min_y.s0.x.max + -3)))

  a_copy[i].max: max(minimum$3.s1.x.max, (min(((((min_y.s0.x.max - min_y.s0.x.min)/4)*4) + min_y.s0.x.min), (min_y.s0.x.max + -3)) + 3))
  a[i].max: max(minimum$3.s1.x.max, min_y.s0.x.max)

  a_copy[i].min: min(minimum$2.s0.x.min, minimum$2.s1.x.min)
  a[i].min: min(minimum$2.s1.x.min, minimum$2.s0.x.min)

  a_copy[i].max: max(minimum$2.s0.x.max, minimum$2.s1.x.max)
  a[i].max: max(minimum$2.s1.x.max, minimum$2.s0.x.max)

  a_copy[i].min: min(minimum$2.s0.y.min, minimum$2.s1.y.min)
  a[i].min: min(minimum$2.s1.y.min, minimum$2.s0.y.min)

  a_copy[i].max: max(minimum$2.s0.y.max, minimum$2.s1.y.max)
  a[i].max: max(minimum$2.s1.y.max, minimum$2.s0.y.max)

  a_copy[i].min: min(minimum$3.s0.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, minimum$3.s0.x.min)

  a_copy[i].max: max(minimum$3.s0.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, minimum$3.s0.x.max)

  a_copy[i].min: min(minimum$3.s0.y.min, minimum$3.s1.y.min)
  a[i].min: min(minimum$3.s1.y.min, minimum$3.s0.y.min)

  a_copy[i].max: max(minimum$3.s0.y.max, minimum$3.s1.y.max)
  a[i].max: max(minimum$3.s1.y.max, minimum$3.s0.y.max)

  a_copy[i].min: min(min(minimum$3.s1.x.min, minimum$2.s1.x.min), min(minimum$2.s1.x.min, minimum$2.s0.x.min))
  a[i].min: min(minimum$3.s1.x.min, min(minimum$2.s1.x.min, minimum$2.s0.x.min))

  a_copy[i].max: max(max(minimum$3.s1.x.max, minimum$2.s1.x.max), max(minimum$2.s1.x.max, minimum$2.s0.x.max))
  a[i].max: max(minimum$3.s1.x.max, max(minimum$2.s1.x.max, minimum$2.s0.x.max))

  a_copy[i].min: min(min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r.min + minimum$3.s1.y.min)), min(minimum$2.s1.y.min, minimum$2.s0.y.min))
  a[i].min: min(minimum$2.s1.y.min, min(minimum$2.s0.y.min, (minimum$3.s1.y.min + minimum$3.s1.ky.x$r.min)))

  a_copy[i].max: max(max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r.max + minimum$3.s1.y.max)), max(minimum$2.s1.y.max, minimum$2.s0.y.max))
  a[i].max: max(minimum$2.s1.y.max, max(minimum$2.s0.y.max, (minimum$3.s1.y.max + minimum$3.s1.ky.x$r.max)))

  a_copy[i].min: min(min(minimum$3.s1.x.min, min(min_y.s0.x.min, (min_y.s0.x.max + -3))), min(minimum$3.s1.x.min, minimum$3.s0.x.min))
  a[i].min: min(minimum$3.s1.x.min, min(minimum$3.s0.x.min, min(min_y.s0.x.min, (min_y.s0.x.max + -3))))

  a_copy[i].max: max(max(minimum$3.s1.x.max, min_y.s0.x.max), max(minimum$3.s1.x.max, minimum$3.s0.x.max))
  a[i].max: max(minimum$3.s1.x.max, max(minimum$3.s0.x.max, min_y.s0.x.max))

  a_copy[i].min: min(min(minimum$3.s1.y.min, min_y.s0.y.min), min(minimum$3.s1.y.min, minimum$3.s0.y.min))
  a[i].min: min(minimum$3.s1.y.min, min(minimum$3.s0.y.min, min_y.s0.y.min))

  a_copy[i].max: max(max(minimum$3.s1.y.max, min_y.s0.y.max), max(minimum$3.s1.y.max, minimum$3.s0.y.max))
  a[i].max: max(minimum$3.s1.y.max, max(minimum$3.s0.y.max, min_y.s0.y.max))

  a_copy[i].min: min(minimum$2.s1.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, minimum$2.s1.x.min)

  a_copy[i].max: max(minimum$2.s1.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, minimum$2.s1.x.max)

  a_copy[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.y.min + minimum$3.s1.ky.x$r.min))
  a[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r.min + minimum$3.s1.y.min))

  a_copy[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.y.max + minimum$3.s1.ky.x$r.max))
  a[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r.max + minimum$3.s1.y.max))

  a_copy[i].min: min(minimum$2.s1.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, minimum$2.s1.x.min)

  a_copy[i].max: max(minimum$2.s1.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, minimum$2.s1.x.max)

  a_copy[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.y.min + minimum$3.s1.ky.x$r.min))
  a[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r.min + minimum$3.s1.y.min))

  a_copy[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.y.max + minimum$3.s1.ky.x$r.max))
  a[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r.max + minimum$3.s1.y.max))

  a_copy[i].min: min(min_y.s0.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, min_y.s0.x.min)

  a_copy[i].max: max(min_y.s0.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, min_y.s0.x.max)

  a_copy[i].min: min(min_y.s0.y.min, minimum$3.s1.y.min)
  a[i].min: min(minimum$3.s1.y.min, min_y.s0.y.min)

  a_copy[i].max: max(min_y.s0.y.max, minimum$3.s1.y.max)
  a[i].max: max(minimum$3.s1.y.max, min_y.s0.y.max)

  a_copy[i].min: min(minimum$2.s1.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, minimum$2.s1.x.min)

  a_copy[i].max: max(minimum$2.s1.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, minimum$2.s1.x.max)

  a_copy[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.y.min + minimum$3.s1.ky.x$r.min))
  a[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r.min + minimum$3.s1.y.min))

  a_copy[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.y.max + minimum$3.s1.ky.x$r.max))
  a[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r.max + minimum$3.s1.y.max))

  a_copy[i].min: min(min_y.s0.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, min_y.s0.x.min)

  a_copy[i].max: max(min_y.s0.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, min_y.s0.x.max)

  a_copy[i].min: min(min_y.s0.y.min, minimum$3.s1.y.min)
  a[i].min: min(minimum$3.s1.y.min, min_y.s0.y.min)

  a_copy[i].max: max(min_y.s0.y.max, minimum$3.s1.y.max)
  a[i].max: max(minimum$3.s1.y.max, min_y.s0.y.max)

  a_copy[i].min: (minimum$3.s1.y.min + minimum$3.s1.ky.x$r.min)
  a[i].min: (minimum$3.s1.ky.x$r.min + minimum$3.s1.y.min)

  a_copy[i].max: (minimum$3.s1.y.max + minimum$3.s1.ky.x$r.max)
  a[i].max: (minimum$3.s1.ky.x$r.max + minimum$3.s1.y.max)

  a_copy[i].min: min(minimum$3.s1.x.min, (min_y.s0.x.v9.base + min_y.s0.x.v9))
  a[i].min: min(minimum$3.s1.x.min, (min_y.s0.x.v9 + min_y.s0.x.v9.base))

  a_copy[i].max: max(minimum$3.s1.x.max, (min_y.s0.x.v9.base + min_y.s0.x.v9))
  a[i].max: max(minimum$3.s1.x.max, (min_y.s0.x.v9 + min_y.s0.x.v9.base))

  a_copy[i].min: min(minimum$3.s0.x.min, minimum$3.s1.x.min)
  a[i].min: min(minimum$3.s1.x.min, minimum$3.s0.x.min)

  a_copy[i].max: max(minimum$3.s0.x.max, minimum$3.s1.x.max)
  a[i].max: max(minimum$3.s1.x.max, minimum$3.s0.x.max)

  a_copy[i].min: min(minimum$3.s0.y.min, minimum$3.s1.y.min)
  a[i].min: min(minimum$3.s1.y.min, minimum$3.s0.y.min)

  a_copy[i].max: max(minimum$3.s0.y.max, minimum$3.s1.y.max)
  a[i].max: max(minimum$3.s1.y.max, minimum$3.s0.y.max)

  a_copy[i].min: min(min(minimum$3.s1.x.min, (min_y.s0.x.v9 + min_y.s0.x.v9.base)), min(minimum$3.s1.x.min, minimum$3.s0.x.min))
  a[i].min: min(minimum$3.s1.x.min, min(minimum$3.s0.x.min, (min_y.s0.x.v9.base + min_y.s0.x.v9)))

  a_copy[i].max: max(max(minimum$3.s1.x.max, (min_y.s0.x.v9 + min_y.s0.x.v9.base)), max(minimum$3.s1.x.max, minimum$3.s0.x.max))
  a[i].max: max(minimum$3.s1.x.max, max(minimum$3.s0.x.max, (min_y.s0.x.v9.base + min_y.s0.x.v9)))

  a_copy[i].min: min(min(minimum$3.s1.y.min, min_y.s0.y), min(minimum$3.s1.y.min, minimum$3.s0.y.min))
  a[i].min: min(minimum$3.s1.y.min, min(minimum$3.s0.y.min, min_y.s0.y))

  a_copy[i].max: max(max(minimum$3.s1.y.max, min_y.s0.y), max(minimum$3.s1.y.max, minimum$3.s0.y.max))
  a[i].max: max(minimum$3.s1.y.max, max(minimum$3.s0.y.max, min_y.s0.y))

  a_copy[i].min: min(minimum$2.s1.x.min, minimum$3.s1.x)
  a[i].min: min(minimum$3.s1.x, minimum$2.s1.x.min)

  a_copy[i].max: max(minimum$2.s1.x.max, minimum$3.s1.x)
  a[i].max: max(minimum$3.s1.x, minimum$2.s1.x.max)

  a_copy[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.y + minimum$3.s1.ky.x$r))
  a[i].min: min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r + minimum$3.s1.y))

  a_copy[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.y + minimum$3.s1.ky.x$r))
  a[i].max: max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r + minimum$3.s1.y))

  a_copy[i].min: min(minimum$2.s0.x.min, minimum$2.s1.x.min)
  a[i].min: min(minimum$2.s1.x.min, minimum$2.s0.x.min)

  a_copy[i].max: max(minimum$2.s0.x.max, minimum$2.s1.x.max)
  a[i].max: max(minimum$2.s1.x.max, minimum$2.s0.x.max)

  a_copy[i].min: min(minimum$2.s0.y.min, minimum$2.s1.y.min)
  a[i].min: min(minimum$2.s1.y.min, minimum$2.s0.y.min)

  a_copy[i].max: max(minimum$2.s0.y.max, minimum$2.s1.y.max)
  a[i].max: max(minimum$2.s1.y.max, minimum$2.s0.y.max)

  a_copy[i].min: min(min(minimum$3.s1.x, minimum$2.s1.x.min), min(minimum$2.s1.x.min, minimum$2.s0.x.min))
  a[i].min: min(minimum$3.s1.x, min(minimum$2.s1.x.min, minimum$2.s0.x.min))

  a_copy[i].max: max(max(minimum$3.s1.x, minimum$2.s1.x.max), max(minimum$2.s1.x.max, minimum$2.s0.x.max))
  a[i].max: max(minimum$3.s1.x, max(minimum$2.s1.x.max, minimum$2.s0.x.max))

  a_copy[i].min: min(min(minimum$2.s1.y.min, (minimum$3.s1.ky.x$r + minimum$3.s1.y)), min(minimum$2.s1.y.min, minimum$2.s0.y.min))
  a[i].min: min(minimum$2.s1.y.min, min(minimum$2.s0.y.min, (minimum$3.s1.y + minimum$3.s1.ky.x$r)))

  a_copy[i].max: max(max(minimum$2.s1.y.max, (minimum$3.s1.ky.x$r + minimum$3.s1.y)), max(minimum$2.s1.y.max, minimum$2.s0.y.max))
  a[i].max: max(minimum$2.s1.y.max, max(minimum$2.s0.y.max, (minimum$3.s1.y + minimum$3.s1.ky.x$r)))

  a_copy[i].min: min(sum$3.s1._0.min, sum_implicit.s0._0.min)
  a[i].min: min(sum_implicit.s0._0.min, sum$3.s1._0.min)

  a_copy[i].max: max(sum$3.s1._0.max, sum_implicit.s0._0.max)
  a[i].max: max(sum_implicit.s0._0.max, sum$3.s1._0.max)

  a_copy[i].min: min(sum$3.s1._1.min, sum_implicit.s0._1.min)
  a[i].min: min(sum_implicit.s0._1.min, sum$3.s1._1.min)

  a_copy[i].max: max(sum$3.s1._1.max, sum_implicit.s0._1.max)
  a[i].max: max(sum_implicit.s0._1.max, sum$3.s1._1.max)

  a_copy[i].min: min(sum$3.s0._0.min, sum$3.s1._0.min)
  a[i].min: min(sum$3.s1._0.min, sum$3.s0._0.min)

  a_copy[i].max: max(sum$3.s0._0.max, sum$3.s1._0.max)
  a[i].max: max(sum$3.s1._0.max, sum$3.s0._0.max)

  a_copy[i].min: min(sum$3.s0._1.min, sum$3.s1._1.min)
  a[i].min: min(sum$3.s1._1.min, sum$3.s0._1.min)

  a_copy[i].max: max(sum$3.s0._1.max, sum$3.s1._1.max)
  a[i].max: max(sum$3.s1._1.max, sum$3.s0._1.max)

  a_copy[i].min: min(min(sum_implicit.s0._0.min, sum$3.s1._0.min), min(sum$3.s1._0.min, sum$3.s0._0.min))
  a[i].min: min(sum_implicit.s0._0.min, min(sum$3.s1._0.min, sum$3.s0._0.min))

  a_copy[i].max: max(max(sum_implicit.s0._0.max, sum$3.s1._0.max), max(sum$3.s1._0.max, sum$3.s0._0.max))
  a[i].max: max(sum_implicit.s0._0.max, max(sum$3.s1._0.max, sum$3.s0._0.max))

  a_copy[i].min: min(min(sum_implicit.s0._1.min, sum$3.s1._1.min), min(sum$3.s1._1.min, sum$3.s0._1.min))
  a[i].min: min(sum_implicit.s0._1.min, min(sum$3.s1._1.min, sum$3.s0._1.min))

  a_copy[i].max: max(max(sum_implicit.s0._1.max, sum$3.s1._1.max), max(sum$3.s1._1.max, sum$3.s0._1.max))
  a[i].max: max(sum_implicit.s0._1.max, max(sum$3.s1._1.max, sum$3.s0._1.max))

  a_copy[i].min: min(sum$3.s1._0.min, sum_implicit.s0._0.min)
  a[i].min: min(sum_implicit.s0._0.min, sum$3.s1._0.min)

  a_copy[i].max: max(sum$3.s1._0.max, sum_implicit.s0._0.max)
  a[i].max: max(sum_implicit.s0._0.max, sum$3.s1._0.max)

  a_copy[i].min: min(sum$3.s1._1.min, sum_implicit.s0._1.min)
  a[i].min: min(sum_implicit.s0._1.min, sum$3.s1._1.min)

  a_copy[i].max: max(sum$3.s1._1.max, sum_implicit.s0._1.max)
  a[i].max: max(sum_implicit.s0._1.max, sum$3.s1._1.max)

  a_copy[i].min: min(sum$3.s1._0.min, sum_implicit.s0._0.min)
  a[i].min: min(sum_implicit.s0._0.min, sum$3.s1._0.min)

  a_copy[i].max: max(sum$3.s1._0.max, sum_implicit.s0._0.max)
  a[i].max: max(sum_implicit.s0._0.max, sum$3.s1._0.max)

  a_copy[i].min: min(sum$3.s1._1.min, sum_implicit.s0._1.min)
  a[i].min: min(sum_implicit.s0._1.min, sum$3.s1._1.min)

  a_copy[i].max: max(sum$3.s1._1.max, sum_implicit.s0._1.max)
  a[i].max: max(sum_implicit.s0._1.max, sum$3.s1._1.max)

  a_copy[i].min: min(sum$3.s1._0.min, sum_implicit.s0._0)
  a[i].min: min(sum_implicit.s0._0, sum$3.s1._0.min)

  a_copy[i].max: max(sum$3.s1._0.max, sum_implicit.s0._0)
  a[i].max: max(sum_implicit.s0._0, sum$3.s1._0.max)

  a_copy[i].min: min(sum$3.s1._1.min, sum_implicit.s0._1)
  a[i].min: min(sum_implicit.s0._1, sum$3.s1._1.min)

  a_copy[i].max: max(sum$3.s1._1.max, sum_implicit.s0._1)
  a[i].max: max(sum_implicit.s0._1, sum$3.s1._1.max)

  a_copy[i].min: min(sum$3.s0._0.min, sum$3.s1._0.min)
  a[i].min: min(sum$3.s1._0.min, sum$3.s0._0.min)

  a_copy[i].max: max(sum$3.s0._0.max, sum$3.s1._0.max)
  a[i].max: max(sum$3.s1._0.max, sum$3.s0._0.max)

  a_copy[i].min: min(sum$3.s0._1.min, sum$3.s1._1.min)
  a[i].min: min(sum$3.s1._1.min, sum$3.s0._1.min)

  a_copy[i].max: max(sum$3.s0._1.max, sum$3.s1._1.max)
  a[i].max: max(sum$3.s1._1.max, sum$3.s0._1.max)

  a_copy[i].min: min(min(sum_implicit.s0._0, sum$3.s1._0.min), min(sum$3.s1._0.min, sum$3.s0._0.min))
  a[i].min: min(sum_implicit.s0._0, min(sum$3.s1._0.min, sum$3.s0._0.min))

  a_copy[i].max: max(max(sum_implicit.s0._0, sum$3.s1._0.max), max(sum$3.s1._0.max, sum$3.s0._0.max))
  a[i].max: max(sum_implicit.s0._0, max(sum$3.s1._0.max, sum$3.s0._0.max))

  a_copy[i].min: min(min(sum_implicit.s0._1, sum$3.s1._1.min), min(sum$3.s1._1.min, sum$3.s0._1.min))
  a[i].min: min(sum_implicit.s0._1, min(sum$3.s1._1.min, sum$3.s0._1.min))

  a_copy[i].max: max(max(sum_implicit.s0._1, sum$3.s1._1.max), max(sum$3.s1._1.max, sum$3.s0._1.max))
  a[i].max: max(sum_implicit.s0._1, max(sum$3.s1._1.max, sum$3.s0._1.max))

  a_copy[i].min: min(product$2.s1._0.min, product_implicit.s0._0.min)
  a[i].min: min(product_implicit.s0._0.min, product$2.s1._0.min)

  a_copy[i].max: max(product$2.s1._0.max, product_implicit.s0._0.max)
  a[i].max: max(product_implicit.s0._0.max, product$2.s1._0.max)

  a_copy[i].min: min(product$2.s1._1.min, product_implicit.s0._1.min)
  a[i].min: min(product_implicit.s0._1.min, product$2.s1._1.min)

  a_copy[i].max: max(product$2.s1._1.max, product_implicit.s0._1.max)
  a[i].max: max(product_implicit.s0._1.max, product$2.s1._1.max)

  a_copy[i].min: min(product$2.s0._0.min, product$2.s1._0.min)
  a[i].min: min(product$2.s1._0.min, product$2.s0._0.min)

  a_copy[i].max: max(product$2.s0._0.max, product$2.s1._0.max)
  a[i].max: max(product$2.s1._0.max, product$2.s0._0.max)

  a_copy[i].min: min(product$2.s0._1.min, product$2.s1._1.min)
  a[i].min: min(product$2.s1._1.min, product$2.s0._1.min)

  a_copy[i].max: max(product$2.s0._1.max, product$2.s1._1.max)
  a[i].max: max(product$2.s1._1.max, product$2.s0._1.max)

  a_copy[i].min: min(min(product_implicit.s0._0.min, product$2.s1._0.min), min(product$2.s1._0.min, product$2.s0._0.min))
  a[i].min: min(product_implicit.s0._0.min, min(product$2.s1._0.min, product$2.s0._0.min))

  a_copy[i].max: max(max(product_implicit.s0._0.max, product$2.s1._0.max), max(product$2.s1._0.max, product$2.s0._0.max))
  a[i].max: max(product_implicit.s0._0.max, max(product$2.s1._0.max, product$2.s0._0.max))

  a_copy[i].min: min(min(product_implicit.s0._1.min, product$2.s1._1.min), min(product$2.s1._1.min, product$2.s0._1.min))
  a[i].min: min(product_implicit.s0._1.min, min(product$2.s1._1.min, product$2.s0._1.min))

  a_copy[i].max: max(max(product_implicit.s0._1.max, product$2.s1._1.max), max(product$2.s1._1.max, product$2.s0._1.max))
  a[i].max: max(product_implicit.s0._1.max, max(product$2.s1._1.max, product$2.s0._1.max))

  a_copy[i].min: min(product$2.s1._0.min, product_implicit.s0._0.min)
  a[i].min: min(product_implicit.s0._0.min, product$2.s1._0.min)

  a_copy[i].max: max(product$2.s1._0.max, product_implicit.s0._0.max)
  a[i].max: max(product_implicit.s0._0.max, product$2.s1._0.max)

  a_copy[i].min: min(product$2.s1._1.min, product_implicit.s0._1.min)
  a[i].min: min(product_implicit.s0._1.min, product$2.s1._1.min)

  a_copy[i].max: max(product$2.s1._1.max, product_implicit.s0._1.max)
  a[i].max: max(product_implicit.s0._1.max, product$2.s1._1.max)

  a_copy[i].min: min(product$2.s1._0.min, product_implicit.s0._0.min)
  a[i].min: min(product_implicit.s0._0.min, product$2.s1._0.min)

  a_copy[i].max: max(product$2.s1._0.max, product_implicit.s0._0.max)
  a[i].max: max(product_implicit.s0._0.max, product$2.s1._0.max)

  a_copy[i].min: min(product$2.s1._1.min, product_implicit.s0._1.min)
  a[i].min: min(product_implicit.s0._1.min, product$2.s1._1.min)

  a_copy[i].max: max(product$2.s1._1.max, product_implicit.s0._1.max)
  a[i].max: max(product_implicit.s0._1.max, product$2.s1._1.max)

  a_copy[i].min: min(product$2.s1._0.min, product_implicit.s0._0)
  a[i].min: min(product_implicit.s0._0, product$2.s1._0.min)

  a_copy[i].max: max(product$2.s1._0.max, product_implicit.s0._0)
  a[i].max: max(product_implicit.s0._0, product$2.s1._0.max)

  a_copy[i].min: min(product$2.s1._1.min, product_implicit.s0._1)
  a[i].min: min(product_implicit.s0._1, product$2.s1._1.min)

  a_copy[i].max: max(product$2.s1._1.max, product_implicit.s0._1)
  a[i].max: max(product_implicit.s0._1, product$2.s1._1.max)

  a_copy[i].min: min(product$2.s0._0.min, product$2.s1._0.min)
  a[i].min: min(product$2.s1._0.min, product$2.s0._0.min)

  a_copy[i].max: max(product$2.s0._0.max, product$2.s1._0.max)
  a[i].max: max(product$2.s1._0.max, product$2.s0._0.max)

  a_copy[i].min: min(product$2.s0._1.min, product$2.s1._1.min)
  a[i].min: min(product$2.s1._1.min, product$2.s0._1.min)

  a_copy[i].max: max(product$2.s0._1.max, product$2.s1._1.max)
  a[i].max: max(product$2.s1._1.max, product$2.s0._1.max)

  a_copy[i].min: min(min(product_implicit.s0._0, product$2.s1._0.min), min(product$2.s1._0.min, product$2.s0._0.min))
  a[i].min: min(product_implicit.s0._0, min(product$2.s1._0.min, product$2.s0._0.min))

  a_copy[i].max: max(max(product_implicit.s0._0, product$2.s1._0.max), max(product$2.s1._0.max, product$2.s0._0.max))
  a[i].max: max(product_implicit.s0._0, max(product$2.s1._0.max, product$2.s0._0.max))

  a_copy[i].min: min(min(product_implicit.s0._1, product$2.s1._1.min), min(product$2.s1._1.min, product$2.s0._1.min))
  a[i].min: min(product_implicit.s0._1, min(product$2.s1._1.min, product$2.s0._1.min))

  a_copy[i].max: max(max(product_implicit.s0._1, product$2.s1._1.max), max(product$2.s1._1.max, product$2.s0._1.max))
  a[i].max: max(product_implicit.s0._1, max(product$2.s1._1.max, product$2.s0._1.max))

  a_copy[i].min: min(minimum$4.s0._0.min, minimum$4.s1._0.min)
  a[i].min: min(minimum$4.s1._0.min, minimum$4.s0._0.min)

  a_copy[i].max: max(minimum$4.s0._0.max, minimum$4.s1._0.max)
  a[i].max: max(minimum$4.s1._0.max, minimum$4.s0._0.max)

  a_copy[i].min: min(minimum$4.s0._1.min, minimum$4.s1._1.min)
  a[i].min: min(minimum$4.s1._1.min, minimum$4.s0._1.min)

  a_copy[i].max: max(minimum$4.s0._1.max, minimum$4.s1._1.max)
  a[i].max: max(minimum$4.s1._1.max, minimum$4.s0._1.max)

  a_copy[i].min: min(min(minimum$4.s1._0.min, min_implicit.s0._0.min), min(minimum$4.s1._0.min, minimum$4.s0._0.min))
  a[i].min: min(minimum$4.s1._0.min, min(minimum$4.s0._0.min, min_implicit.s0._0.min))

  a_copy[i].max: max(max(minimum$4.s1._0.max, min_implicit.s0._0.max), max(minimum$4.s1._0.max, minimum$4.s0._0.max))
  a[i].max: max(minimum$4.s1._0.max, max(minimum$4.s0._0.max, min_implicit.s0._0.max))

  a_copy[i].min: min(min(minimum$4.s1._1.min, min_implicit.s0._1.min), min(minimum$4.s1._1.min, minimum$4.s0._1.min))
  a[i].min: min(minimum$4.s1._1.min, min(minimum$4.s0._1.min, min_implicit.s0._1.min))

  a_copy[i].max: max(max(minimum$4.s1._1.max, min_implicit.s0._1.max), max(minimum$4.s1._1.max, minimum$4.s0._1.max))
  a[i].max: max(minimum$4.s1._1.max, max(minimum$4.s0._1.max, min_implicit.s0._1.max))

  a_copy[i].min: min(min_implicit.s0._0.min, minimum$4.s1._0.min)
  a[i].min: min(minimum$4.s1._0.min, min_implicit.s0._0.min)

  a_copy[i].max: max(min_implicit.s0._0.max, minimum$4.s1._0.max)
  a[i].max: max(minimum$4.s1._0.max, min_implicit.s0._0.max)

  a_copy[i].min: min(min_implicit.s0._1.min, minimum$4.s1._1.min)
  a[i].min: min(minimum$4.s1._1.min, min_implicit.s0._1.min)

  a_copy[i].max: max(min_implicit.s0._1.max, minimum$4.s1._1.max)
  a[i].max: max(minimum$4.s1._1.max, min_implicit.s0._1.max)

  a_copy[i].min: min(min_implicit.s0._0.min, minimum$4.s1._0.min)
  a[i].min: min(minimum$4.s1._0.min, min_implicit.s0._0.min)

  a_copy[i].max: max(min_implicit.s0._0.max, minimum$4.s1._0.max)
  a[i].max: max(minimum$4.s1._0.max, min_implicit.s0._0.max)

  a_copy[i].min: min(min_implicit.s0._1.min, minimum$4.s1._1.min)
  a[i].min: min(minimum$4.s1._1.min, min_implicit.s0._1.min)

  a_copy[i].max: max(min_implicit.s0._1.max, minimum$4.s1._1.max)
  a[i].max: max(minimum$4.s1._1.max, min_implicit.s0._1.max)

  a_copy[i].min: min(minimum$4.s0._0.min, minimum$4.s1._0.min)
  a[i].min: min(minimum$4.s1._0.min, minimum$4.s0._0.min)

  a_copy[i].max: max(minimum$4.s0._0.max, minimum$4.s1._0.max)
  a[i].max: max(minimum$4.s1._0.max, minimum$4.s0._0.max)

  a_copy[i].min: min(minimum$4.s0._1.min, minimum$4.s1._1.min)
  a[i].min: min(minimum$4.s1._1.min, minimum$4.s0._1.min)

  a_copy[i].max: max(minimum$4.s0._1.max, minimum$4.s1._1.max)
  a[i].max: max(minimum$4.s1._1.max, minimum$4.s0._1.max)

  a_copy[i].min: min(min(minimum$4.s1._0.min, min_implicit.s0._0), min(minimum$4.s1._0.min, minimum$4.s0._0.min))
  a[i].min: min(minimum$4.s1._0.min, min(minimum$4.s0._0.min, min_implicit.s0._0))

  a_copy[i].max: max(max(minimum$4.s1._0.max, min_implicit.s0._0), max(minimum$4.s1._0.max, minimum$4.s0._0.max))
  a[i].max: max(minimum$4.s1._0.max, max(minimum$4.s0._0.max, min_implicit.s0._0))

  a_copy[i].min: min(min(minimum$4.s1._1.min, min_implicit.s0._1), min(minimum$4.s1._1.min, minimum$4.s0._1.min))
  a[i].min: min(minimum$4.s1._1.min, min(minimum$4.s0._1.min, min_implicit.s0._1))

  a_copy[i].max: max(max(minimum$4.s1._1.max, min_implicit.s0._1), max(minimum$4.s1._1.max, minimum$4.s0._1.max))
  a[i].max: max(minimum$4.s1._1.max, max(minimum$4.s0._1.max, min_implicit.s0._1))

  a_copy[i].min: min(maximum$2.s0._0.min, maximum$2.s1._0.min)
  a[i].min: min(maximum$2.s1._0.min, maximum$2.s0._0.min)

  a_copy[i].max: max(maximum$2.s0._0.max, maximum$2.s1._0.max)
  a[i].max: max(maximum$2.s1._0.max, maximum$2.s0._0.max)

  a_copy[i].min: min(maximum$2.s0.y.min, maximum$2.s1.y.min)
  a[i].min: min(maximum$2.s1.y.min, maximum$2.s0.y.min)

  a_copy[i].max: max(maximum$2.s0.y.max, maximum$2.s1.y.max)
  a[i].max: max(maximum$2.s1.y.max, maximum$2.s0.y.max)

  a_copy[i].min: min(min(maximum$2.s1._0.min, max_implicit.s0._0.min), min(maximum$2.s1._0.min, maximum$2.s0._0.min))
  a[i].min: min(maximum$2.s1._0.min, min(maximum$2.s0._0.min, max_implicit.s0._0.min))

  a_copy[i].max: max(max(maximum$2.s1._0.max, max_implicit.s0._0.max), max(maximum$2.s1._0.max, maximum$2.s0._0.max))
  a[i].max: max(maximum$2.s1._0.max, max(maximum$2.s0._0.max, max_implicit.s0._0.max))

  a_copy[i].min: min(min(maximum$2.s1.y.min, max_implicit.s0.y.min), min(maximum$2.s1.y.min, maximum$2.s0.y.min))
  a[i].min: min(maximum$2.s1.y.min, min(maximum$2.s0.y.min, max_implicit.s0.y.min))

  a_copy[i].max: max(max(maximum$2.s1.y.max, max_implicit.s0.y.max), max(maximum$2.s1.y.max, maximum$2.s0.y.max))
  a[i].max: max(maximum$2.s1.y.max, max(maximum$2.s0.y.max, max_implicit.s0.y.max))

  a_copy[i].min: min(max_implicit.s0._0.min, maximum$2.s1._0.min)
  a[i].min: min(maximum$2.s1._0.min, max_implicit.s0._0.min)

  a_copy[i].max: max(max_implicit.s0._0.max, maximum$2.s1._0.max)
  a[i].max: max(maximum$2.s1._0.max, max_implicit.s0._0.max)

  a_copy[i].min: min(max_implicit.s0.y.min, maximum$2.s1.y.min)
  a[i].min: min(maximum$2.s1.y.min, max_implicit.s0.y.min)

  a_copy[i].max: max(max_implicit.s0.y.max, maximum$2.s1.y.max)
  a[i].max: max(maximum$2.s1.y.max, max_implicit.s0.y.max)

  a_copy[i].min: min(max_implicit.s0._0.min, maximum$2.s1._0.min)
  a[i].min: min(maximum$2.s1._0.min, max_implicit.s0._0.min)

  a_copy[i].max: max(max_implicit.s0._0.max, maximum$2.s1._0.max)
  a[i].max: max(maximum$2.s1._0.max, max_implicit.s0._0.max)

  a_copy[i].min: min(max_implicit.s0.y.min, maximum$2.s1.y.min)
  a[i].min: min(maximum$2.s1.y.min, max_implicit.s0.y.min)

  a_copy[i].max: max(max_implicit.s0.y.max, maximum$2.s1.y.max)
  a[i].max: max(maximum$2.s1.y.max, max_implicit.s0.y.max)

  a_copy[i].min: min(maximum$2.s0._0.min, maximum$2.s1._0.min)
  a[i].min: min(maximum$2.s1._0.min, maximum$2.s0._0.min)

  a_copy[i].max: max(maximum$2.s0._0.max, maximum$2.s1._0.max)
  a[i].max: max(maximum$2.s1._0.max, maximum$2.s0._0.max)

  a_copy[i].min: min(maximum$2.s0.y.min, maximum$2.s1.y.min)
  a[i].min: min(maximum$2.s1.y.min, maximum$2.s0.y.min)

  a_copy[i].max: max(maximum$2.s0.y.max, maximum$2.s1.y.max)
  a[i].max: max(maximum$2.s1.y.max, maximum$2.s0.y.max)

  a_copy[i].min: min(min(maximum$2.s1._0.min, max_implicit.s0._0), min(maximum$2.s1._0.min, maximum$2.s0._0.min))
  a[i].min: min(maximum$2.s1._0.min, min(maximum$2.s0._0.min, max_implicit.s0._0))

  a_copy[i].max: max(max(maximum$2.s1._0.max, max_implicit.s0._0), max(maximum$2.s1._0.max, maximum$2.s0._0.max))
  a[i].max: max(maximum$2.s1._0.max, max(maximum$2.s0._0.max, max_implicit.s0._0))

  a_copy[i].min: min(min(maximum$2.s1.y.min, max_implicit.s0.y), min(maximum$2.s1.y.min, maximum$2.s0.y.min))
  a[i].min: min(maximum$2.s1.y.min, min(maximum$2.s0.y.min, max_implicit.s0.y))

  a_copy[i].max: max(max(maximum$2.s1.y.max, max_implicit.s0.y), max(maximum$2.s1.y.max, maximum$2.s0.y.max))
  a[i].max: max(maximum$2.s1.y.max, max(maximum$2.s0.y.max, max_implicit.s0.y))

  a_copy[i].min: min(argmin.s1._0.min, argmin_implicit.s0._0.min)
  a[i].min: min(argmin_implicit.s0._0.min, argmin.s1._0.min)

  a_copy[i].max: max(argmin.s1._0.max, argmin_implicit.s0._0.max)
  a[i].max: max(argmin_implicit.s0._0.max, argmin.s1._0.max)

  a_copy[i].min: min(argmin.s1._1.min, argmin_implicit.s0._1.min)
  a[i].min: min(argmin_implicit.s0._1.min, argmin.s1._1.min)

  a_copy[i].max: max(argmin.s1._1.max, argmin_implicit.s0._1.max)
  a[i].max: max(argmin_implicit.s0._1.max, argmin.s1._1.max)

  a_copy[i].min: min(argmin.s0._0.min, argmin.s1._0.min)
  a[i].min: min(argmin.s1._0.min, argmin.s0._0.min)

  a_copy[i].max: max(argmin.s0._0.max, argmin.s1._0.max)
  a[i].max: max(argmin.s1._0.max, argmin.s0._0.max)

  a_copy[i].min: min(argmin.s0._1.min, argmin.s1._1.min)
  a[i].min: min(argmin.s1._1.min, argmin.s0._1.min)

  a_copy[i].max: max(argmin.s0._1.max, argmin.s1._1.max)
  a[i].max: max(argmin.s1._1.max, argmin.s0._1.max)

  a_copy[i].min: min(min(argmin_implicit.s0._0.min, argmin.s1._0.min), min(argmin.s1._0.min, argmin.s0._0.min))
  a[i].min: min(argmin_implicit.s0._0.min, min(argmin.s1._0.min, argmin.s0._0.min))

  a_copy[i].max: max(max(argmin_implicit.s0._0.max, argmin.s1._0.max), max(argmin.s1._0.max, argmin.s0._0.max))
  a[i].max: max(argmin_implicit.s0._0.max, max(argmin.s1._0.max, argmin.s0._0.max))

  a_copy[i].min: min(min(argmin_implicit.s0._1.min, argmin.s1._1.min), min(argmin.s1._1.min, argmin.s0._1.min))
  a[i].min: min(argmin_implicit.s0._1.min, min(argmin.s1._1.min, argmin.s0._1.min))

  a_copy[i].max: max(max(argmin_implicit.s0._1.max, argmin.s1._1.max), max(argmin.s1._1.max, argmin.s0._1.max))
  a[i].max: max(argmin_implicit.s0._1.max, max(argmin.s1._1.max, argmin.s0._1.max))

  a_copy[i].min: min(argmin.s1._0.min, argmin_implicit.s0._0.min)
  a[i].min: min(argmin_implicit.s0._0.min, argmin.s1._0.min)

  a_copy[i].max: max(argmin.s1._0.max, argmin_implicit.s0._0.max)
  a[i].max: max(argmin_implicit.s0._0.max, argmin.s1._0.max)

  a_copy[i].min: min(argmin.s1._1.min, argmin_implicit.s0._1.min)
  a[i].min: min(argmin_implicit.s0._1.min, argmin.s1._1.min)

  a_copy[i].max: max(argmin.s1._1.max, argmin_implicit.s0._1.max)
  a[i].max: max(argmin_implicit.s0._1.max, argmin.s1._1.max)

  a_copy[i].min: min(argmin.s1._0.min, argmin_implicit.s0._0.min)
  a[i].min: min(argmin_implicit.s0._0.min, argmin.s1._0.min)

  a_copy[i].max: max(argmin.s1._0.max, argmin_implicit.s0._0.max)
  a[i].max: max(argmin_implicit.s0._0.max, argmin.s1._0.max)

  a_copy[i].min: min(argmin.s1._1.min, argmin_implicit.s0._1.min)
  a[i].min: min(argmin_implicit.s0._1.min, argmin.s1._1.min)

  a_copy[i].max: max(argmin.s1._1.max, argmin_implicit.s0._1.max)
  a[i].max: max(argmin_implicit.s0._1.max, argmin.s1._1.max)

  a_copy[i].min: min(argmin.s1._0.min, argmin_implicit.s0._0)
  a[i].min: min(argmin_implicit.s0._0, argmin.s1._0.min)

  a_copy[i].max: max(argmin.s1._0.max, argmin_implicit.s0._0)
  a[i].max: max(argmin_implicit.s0._0, argmin.s1._0.max)

  a_copy[i].min: min(argmin.s1._1.min, argmin_implicit.s0._1)
  a[i].min: min(argmin_implicit.s0._1, argmin.s1._1.min)

  a_copy[i].max: max(argmin.s1._1.max, argmin_implicit.s0._1)
  a[i].max: max(argmin_implicit.s0._1, argmin.s1._1.max)

  a_copy[i].min: min(argmin.s0._0.min, argmin.s1._0.min)
  a[i].min: min(argmin.s1._0.min, argmin.s0._0.min)

  a_copy[i].max: max(argmin.s0._0.max, argmin.s1._0.max)
  a[i].max: max(argmin.s1._0.max, argmin.s0._0.max)

  a_copy[i].min: min(argmin.s0._1.min, argmin.s1._1.min)
  a[i].min: min(argmin.s1._1.min, argmin.s0._1.min)

  a_copy[i].max: max(argmin.s0._1.max, argmin.s1._1.max)
  a[i].max: max(argmin.s1._1.max, argmin.s0._1.max)

  a_copy[i].min: min(min(argmin_implicit.s0._0, argmin.s1._0.min), min(argmin.s1._0.min, argmin.s0._0.min))
  a[i].min: min(argmin_implicit.s0._0, min(argmin.s1._0.min, argmin.s0._0.min))

  a_copy[i].max: max(max(argmin_implicit.s0._0, argmin.s1._0.max), max(argmin.s1._0.max, argmin.s0._0.max))
  a[i].max: max(argmin_implicit.s0._0, max(argmin.s1._0.max, argmin.s0._0.max))

  a_copy[i].min: min(min(argmin_implicit.s0._1, argmin.s1._1.min), min(argmin.s1._1.min, argmin.s0._1.min))
  a[i].min: min(argmin_implicit.s0._1, min(argmin.s1._1.min, argmin.s0._1.min))

  a_copy[i].max: max(max(argmin_implicit.s0._1, argmin.s1._1.max), max(argmin.s1._1.max, argmin.s0._1.max))
  a[i].max: max(argmin_implicit.s0._1, max(argmin.s1._1.max, argmin.s0._1.max))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$6843) min: argmin.s0._0; max: argmin.s0._0
Dim (_interval$6844) min: argmin.s0._1; max: argmin.s0._1
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$6847) min: argmin.s1._0; max: argmin.s1._0
Dim (_interval$6848) min: argmin.s1._1; max: argmin.s1._1
  Box B:
Used: (undefined)
Dim (_interval$6857) min: argmin.s1._0; max: argmin.s1._0
Dim (_interval$6858) min: argmin.s1._1; max: argmin.s1._1
boxes_overlap_halide? 1
boxes_overlap_nfm? 1

  a_copy[i].min: min(argmax.s1.x.min, argmax_implicit.s0.x.min)
  a[i].min: min(argmax_implicit.s0.x.min, argmax.s1.x.min)

  a_copy[i].max: max(argmax.s1.x.max, argmax_implicit.s0.x.max)
  a[i].max: max(argmax_implicit.s0.x.max, argmax.s1.x.max)

  a_copy[i].min: min(argmax.s1._0.min, argmax_implicit.s0._0.min)
  a[i].min: min(argmax_implicit.s0._0.min, argmax.s1._0.min)

  a_copy[i].max: max(argmax.s1._0.max, argmax_implicit.s0._0.max)
  a[i].max: max(argmax_implicit.s0._0.max, argmax.s1._0.max)

  a_copy[i].min: min(argmax.s0.x.min, argmax.s1.x.min)
  a[i].min: min(argmax.s1.x.min, argmax.s0.x.min)

  a_copy[i].max: max(argmax.s0.x.max, argmax.s1.x.max)
  a[i].max: max(argmax.s1.x.max, argmax.s0.x.max)

  a_copy[i].min: min(argmax.s0._0.min, argmax.s1._0.min)
  a[i].min: min(argmax.s1._0.min, argmax.s0._0.min)

  a_copy[i].max: max(argmax.s0._0.max, argmax.s1._0.max)
  a[i].max: max(argmax.s1._0.max, argmax.s0._0.max)

  a_copy[i].min: min(min(argmax_implicit.s0.x.min, argmax.s1.x.min), min(argmax.s1.x.min, argmax.s0.x.min))
  a[i].min: min(argmax_implicit.s0.x.min, min(argmax.s1.x.min, argmax.s0.x.min))

  a_copy[i].max: max(max(argmax_implicit.s0.x.max, argmax.s1.x.max), max(argmax.s1.x.max, argmax.s0.x.max))
  a[i].max: max(argmax_implicit.s0.x.max, max(argmax.s1.x.max, argmax.s0.x.max))

  a_copy[i].min: min(min(argmax_implicit.s0._0.min, argmax.s1._0.min), min(argmax.s1._0.min, argmax.s0._0.min))
  a[i].min: min(argmax_implicit.s0._0.min, min(argmax.s1._0.min, argmax.s0._0.min))

  a_copy[i].max: max(max(argmax_implicit.s0._0.max, argmax.s1._0.max), max(argmax.s1._0.max, argmax.s0._0.max))
  a[i].max: max(argmax_implicit.s0._0.max, max(argmax.s1._0.max, argmax.s0._0.max))

  a_copy[i].min: min(argmax.s1.x.min, argmax_implicit.s0.x.min)
  a[i].min: min(argmax_implicit.s0.x.min, argmax.s1.x.min)

  a_copy[i].max: max(argmax.s1.x.max, argmax_implicit.s0.x.max)
  a[i].max: max(argmax_implicit.s0.x.max, argmax.s1.x.max)

  a_copy[i].min: min(argmax.s1._0.min, argmax_implicit.s0._0.min)
  a[i].min: min(argmax_implicit.s0._0.min, argmax.s1._0.min)

  a_copy[i].max: max(argmax.s1._0.max, argmax_implicit.s0._0.max)
  a[i].max: max(argmax_implicit.s0._0.max, argmax.s1._0.max)

  a_copy[i].min: min(argmax.s1.x.min, argmax_implicit.s0.x.min)
  a[i].min: min(argmax_implicit.s0.x.min, argmax.s1.x.min)

  a_copy[i].max: max(argmax.s1.x.max, argmax_implicit.s0.x.max)
  a[i].max: max(argmax_implicit.s0.x.max, argmax.s1.x.max)

  a_copy[i].min: min(argmax.s1._0.min, argmax_implicit.s0._0.min)
  a[i].min: min(argmax_implicit.s0._0.min, argmax.s1._0.min)

  a_copy[i].max: max(argmax.s1._0.max, argmax_implicit.s0._0.max)
  a[i].max: max(argmax_implicit.s0._0.max, argmax.s1._0.max)

  a_copy[i].min: min(argmax.s1.x.min, argmax_implicit.s0.x)
  a[i].min: min(argmax_implicit.s0.x, argmax.s1.x.min)

  a_copy[i].max: max(argmax.s1.x.max, argmax_implicit.s0.x)
  a[i].max: max(argmax_implicit.s0.x, argmax.s1.x.max)

  a_copy[i].min: min(argmax.s1._0.min, argmax_implicit.s0._0)
  a[i].min: min(argmax_implicit.s0._0, argmax.s1._0.min)

  a_copy[i].max: max(argmax.s1._0.max, argmax_implicit.s0._0)
  a[i].max: max(argmax_implicit.s0._0, argmax.s1._0.max)

  a_copy[i].min: min(argmax.s0.x.min, argmax.s1.x.min)
  a[i].min: min(argmax.s1.x.min, argmax.s0.x.min)

  a_copy[i].max: max(argmax.s0.x.max, argmax.s1.x.max)
  a[i].max: max(argmax.s1.x.max, argmax.s0.x.max)

  a_copy[i].min: min(argmax.s0._0.min, argmax.s1._0.min)
  a[i].min: min(argmax.s1._0.min, argmax.s0._0.min)

  a_copy[i].max: max(argmax.s0._0.max, argmax.s1._0.max)
  a[i].max: max(argmax.s1._0.max, argmax.s0._0.max)

  a_copy[i].min: min(min(argmax_implicit.s0.x, argmax.s1.x.min), min(argmax.s1.x.min, argmax.s0.x.min))
  a[i].min: min(argmax_implicit.s0.x, min(argmax.s1.x.min, argmax.s0.x.min))

  a_copy[i].max: max(max(argmax_implicit.s0.x, argmax.s1.x.max), max(argmax.s1.x.max, argmax.s0.x.max))
  a[i].max: max(argmax_implicit.s0.x, max(argmax.s1.x.max, argmax.s0.x.max))

  a_copy[i].min: min(min(argmax_implicit.s0._0, argmax.s1._0.min), min(argmax.s1._0.min, argmax.s0._0.min))
  a[i].min: min(argmax_implicit.s0._0, min(argmax.s1._0.min, argmax.s0._0.min))

  a_copy[i].max: max(max(argmax_implicit.s0._0, argmax.s1._0.max), max(argmax.s1._0.max, argmax.s0._0.max))
  a[i].max: max(argmax_implicit.s0._0, max(argmax.s1._0.max, argmax.s0._0.max))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$7408) min: argmax.s0.x; max: argmax.s0.x
Dim (_interval$7409) min: argmax.s0._0; max: argmax.s0._0
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$7412) min: argmax.s1.x; max: argmax.s1.x
Dim (_interval$7413) min: argmax.s1._0; max: argmax.s1._0
  Box B:
Used: (undefined)
Dim (_interval$7416) min: argmax.s1.x; max: argmax.s1.x
Dim (_interval$7417) min: argmax.s1._0; max: argmax.s1._0
boxes_overlap_halide? 1
boxes_overlap_nfm? 1
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/in_place.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_in_place -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_in_place

  a_copy[i].min: min(f.s1.r.x$r.min, (f.s1.r.x$r.min - 1))
  a[i].min: (f.s1.r.x$r.min + -1)

  a_copy[i].max: max(f.s1.r.x$r.max, (f.s1.r.x$r.max - 1))
  a[i].max: f.s1.r.x$r.max

  a_copy[i].min: min(f.s0.x.min, f.s1.r.x$r.min)
  a[i].min: min(f.s1.r.x$r.min, f.s0.x.min)

  a_copy[i].max: max(f.s0.x.max, f.s1.r.x$r.max)
  a[i].max: max(f.s1.r.x$r.max, f.s0.x.max)

  a_copy[i].min: min((f.s1.r.x$r.min + -1), min(f.s1.r.x$r.min, f.s0.x.min))
  a[i].min: min(f.s1.r.x$r.min, min(f.s0.x.min, (f.s1.r.x$r.min + -1)))

  a_copy[i].max: max(f.s1.r.x$r.max, max(f.s1.r.x$r.max, f.s0.x.max))
  a[i].max: max(f.s1.r.x$r.max, f.s0.x.max)

  a_copy[i].min: min(f.s1.r.x$r.min, (f.s1.r.x$r.min - 1))
  a[i].min: (f.s1.r.x$r.min + -1)

  a_copy[i].max: max(f.s1.r.x$r.max, (f.s1.r.x$r.max - 1))
  a[i].max: f.s1.r.x$r.max

  a_copy[i].max: max(((f.min.0 + f.extent.0) - 1), f.s1.r.x$r.max)
  a[i].max: max(f.s1.r.x$r.max, ((f.extent.0 + f.min.0) + -1))

  a_copy[i].min: min(g.s1.r.x$r.min, (g.s1.r.x$r.min - 1))
  a[i].min: (g.s1.r.x$r.min + -1)

  a_copy[i].max: max(g.s1.r.x$r.max, (g.s1.r.x$r.max - 1))
  a[i].max: g.s1.r.x$r.max

  a_copy[i].min: min(g.s0.x.min, g.s1.r.x$r.min)
  a[i].min: min(g.s1.r.x$r.min, g.s0.x.min)

  a_copy[i].max: max(g.s0.x.max, g.s1.r.x$r.max)
  a[i].max: max(g.s1.r.x$r.max, g.s0.x.max)

  a_copy[i].min: min((g.s1.r.x$r.min + -1), min(g.s1.r.x$r.min, g.s0.x.min))
  a[i].min: min(g.s1.r.x$r.min, min(g.s0.x.min, (g.s1.r.x$r.min + -1)))

  a_copy[i].max: max(g.s1.r.x$r.max, max(g.s1.r.x$r.max, g.s0.x.max))
  a[i].max: max(g.s1.r.x$r.max, g.s0.x.max)

  a_copy[i].min: min(g.s1.r.x$r.min, (g.s1.r.x$r.min - 1))
  a[i].min: (g.s1.r.x$r.min + -1)

  a_copy[i].max: max(g.s1.r.x$r.max, (g.s1.r.x$r.max - 1))
  a[i].max: g.s1.r.x$r.max

  a_copy[i].max: max(((g.min.0 + g.extent.0) - 1), g.s1.r.x$r.max)
  a[i].max: max(g.s1.r.x$r.max, ((g.extent.0 + g.min.0) + -1))
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/input_image_bounds_check.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_input_image_bounds_check -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_input_image_bounds_check
Input buffer input is accessed at 22, which is beyond the max (18) in dimension 0

  a_copy[i].min: min(h.s0.x.min, (min(g.s0.x.min, (g.s0.x.max + -3)) + 0))
  a[i].min: min(h.s0.x.min, min(g.s0.x.min, (g.s0.x.max + -3)))

  a_copy[i].max: max(h.s0.x.max, (min(((((g.s0.x.max - g.s0.x.min)/4)*4) + g.s0.x.min), (g.s0.x.max + -3)) + 3))
  a[i].max: max(h.s0.x.max, g.s0.x.max)

  a_copy[i].min: min(h.s0.x.min, (min(g.s0.x.min, (g.s0.x.max + -3)) + 0))
  a[i].min: min(h.s0.x.min, min(g.s0.x.min, (g.s0.x.max + -3)))

  a_copy[i].max: max(h.s0.x.max, (min(((((g.s0.x.max - g.s0.x.min)/4)*4) + g.s0.x.min), (g.s0.x.max + -3)) + 3))
  a[i].max: max(h.s0.x.max, g.s0.x.max)
Input buffer small_input is accessed at 3, which is beyond the max (2) in dimension 0
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/input_larger_than_two_gigs.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_input_larger_than_two_gigs -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_input_larger_than_two_gigs
Expected: Product of extents for buffer input is 4294967296, which exceeds the maximum size of 2147483647
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/integer_powers.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_integer_powers -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_integer_powers
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/interleave.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_interleave -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_interleave

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), f.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), f.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), f.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), g.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), g.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), g.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), f.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), f.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), f.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), g.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), g.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), g.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), f.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), f.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), f.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), g.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), g.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), g.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), f.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), f.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), f.s0.x.max)

  a_copy[i].min: min(((min(h.s0.x.min, (h.s0.x.max + -7)) + 0)/2), g.s0.x.min)
  a[i].min: select((h.s0.x.min < (h.s0.x.max + -6)), int32(ceil_f32(float32((h.s0.x.min/2)))), int32(ceil_f32(float32(((h.s0.x.max + -7)/2)))))

  a_copy[i].max: max(((min(((((h.s0.x.max - h.s0.x.min)/8)*8) + h.s0.x.min), (h.s0.x.max + -7)) + 7)/2), g.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((h.s0.x.max/2)))), g.s0.x.max)

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), f$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), g$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$2.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$2.s0.x.min/2))))

  a_copy[i].max: (h$2.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: (h$2.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$2.s0.x.min/2))))

  a_copy[i].max: (h$2.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), f$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), g$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$1267) min: f$2.s0.x; max: f$2.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$1269) min: g$2.s0.x; max: g$2.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].min: int32(ceil_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

  a_copy[i].max: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].max: int32(floor_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

  a_copy[i].min: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].min: int32(ceil_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

  a_copy[i].max: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].max: int32(floor_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$1271) min: (h$2.s0.x.v1.base + h$2.s0.x.v1); max: (h$2.s0.x.v1.base + h$2.s0.x.v1)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), f$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), g$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$2.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$2.s0.x.min/2))))

  a_copy[i].max: (h$2.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: (h$2.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$2.s0.x.min/2))))

  a_copy[i].max: (h$2.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), f$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: ((min(h$2.s0.x.min, (h$2.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$2.s0.x.max - h$2.s0.x.min)/8)*8) + h$2.s0.x.min), (h$2.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$2.s0.x.max/2))))

  a_copy[i].min: min(select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2))))), g$2.s0.x.min)
  a[i].min: select((h$2.s0.x.min < (h$2.s0.x.max + -6)), int32(ceil_f32(float32((h$2.s0.x.min/2)))), int32(ceil_f32(float32(((h$2.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$1725) min: f$2.s0.x; max: f$2.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$1727) min: g$2.s0.x; max: g$2.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].min: int32(ceil_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

  a_copy[i].max: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].max: int32(floor_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

  a_copy[i].min: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].min: int32(ceil_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

  a_copy[i].max: ((h$2.s0.x.v1.base + h$2.s0.x.v1)/2)
  a[i].max: int32(floor_f32(float32(((h$2.s0.x.v1 + h$2.s0.x.v1.base)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$1729) min: (h$2.s0.x.v1.base + h$2.s0.x.v1); max: (h$2.s0.x.v1.base + h$2.s0.x.v1)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), f$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), g$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$3.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: (h$3.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: (h$3.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: (h$3.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$3.s0.x.min/2)))), (h$3.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), (h$3.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$3.s0.x.min/2)))), (h$3.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), (h$3.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), f$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), g$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$2214) min: f$3.s0.x; max: f$3.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$2216) min: g$3.s0.x; max: g$3.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].max: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].min: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].max: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$2218) min: (h$3.s0.x.v2.base + h$3.s0.x.v2); max: (h$3.s0.x.v2.base + h$3.s0.x.v2)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), f$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), g$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$3.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: (h$3.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: (h$3.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: (h$3.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$3.s0.x.min/2)))), (h$3.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), (h$3.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$3.s0.x.min/2)))), (h$3.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$3.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), (h$3.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), f$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), ((min(h$3.s0.x.min, (h$3.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$3.s0.x.max/2)))), ((min(((((h$3.s0.x.max - h$3.s0.x.min)/8)*8) + h$3.s0.x.min), (h$3.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$3.s0.x.max/2))))

  a_copy[i].min: min(select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2))))), g$3.s0.x.min)
  a[i].min: select((h$3.s0.x.min < (h$3.s0.x.max + -6)), int32(ceil_f32(float32((h$3.s0.x.min/2)))), int32(ceil_f32(float32(((h$3.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$2707) min: f$3.s0.x; max: f$3.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$2709) min: g$3.s0.x; max: g$3.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].max: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].min: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].max: ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2)
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].min: int32(ceil_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$3.s0.x.v2 + h$3.s0.x.v2.base)/2)))), ((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))
  a[i].max: int32(floor_f32(float32(((h$3.s0.x.v2.base + h$3.s0.x.v2)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$2711) min: (h$3.s0.x.v2.base + h$3.s0.x.v2); max: (h$3.s0.x.v2.base + h$3.s0.x.v2)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), f$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), g$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$4.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: (h$4.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: (h$4.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: (h$4.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), f$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), g$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$3231) min: f$4.s0.x; max: f$4.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$3233) min: g$4.s0.x; max: g$4.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].min: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$3235) min: (h$4.s0.x.v3.base + h$4.s0.x.v3); max: (h$4.s0.x.v3.base + h$4.s0.x.v3)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), f$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), g$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$4.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: (h$4.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: (h$4.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: (h$4.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$4.s0.x.min/2)))), (h$4.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$4.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), (h$4.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), f$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), ((min(h$4.s0.x.min, (h$4.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$4.s0.x.max/2)))), ((min(((((h$4.s0.x.max - h$4.s0.x.min)/8)*8) + h$4.s0.x.min), (h$4.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$4.s0.x.max/2))))

  a_copy[i].min: min(select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2))))), g$4.s0.x.min)
  a[i].min: select((h$4.s0.x.min < (h$4.s0.x.max + -6)), int32(ceil_f32(float32((h$4.s0.x.min/2)))), int32(ceil_f32(float32(((h$4.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$3759) min: f$4.s0.x; max: f$4.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$3761) min: g$4.s0.x; max: g$4.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].min: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].min: int32(ceil_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$4.s0.x.v3.base + h$4.s0.x.v3)/2)))), ((h$4.s0.x.v3.base + h$4.s0.x.v3)/2))
  a[i].max: int32(floor_f32(float32(((h$4.s0.x.v3 + h$4.s0.x.v3.base)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$3763) min: (h$4.s0.x.v3.base + h$4.s0.x.v3); max: (h$4.s0.x.v3.base + h$4.s0.x.v3)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), f$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), g$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$5.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: (h$5.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: (h$5.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: (h$5.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), f$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), g$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$4318) min: f$5.s0.x; max: f$5.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$4320) min: g$5.s0.x; max: g$5.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$4322) min: (h$5.s0.x.v4.base + h$5.s0.x.v4); max: (h$5.s0.x.v4.base + h$5.s0.x.v4)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), f$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), g$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].min: (h$5.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: (h$5.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: (h$5.s0.x.min/2)
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: (h$5.s0.x.max/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(int32(ceil_f32(float32((h$5.s0.x.min/2)))), (h$5.s0.x.min/2))
  a[i].min: int32(ceil_f32(float32((h$5.s0.x.min/2))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), (h$5.s0.x.max/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), f$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2)
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), ((min(h$5.s0.x.min, (h$5.s0.x.max + -7)) + 0)/2))
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

  a_copy[i].max: max(int32(floor_f32(float32((h$5.s0.x.max/2)))), ((min(((((h$5.s0.x.max - h$5.s0.x.min)/8)*8) + h$5.s0.x.min), (h$5.s0.x.max + -7)) + 7)/2))
  a[i].max: int32(floor_f32(float32((h$5.s0.x.max/2))))

  a_copy[i].min: min(select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2))))), g$5.s0.x.min)
  a[i].min: select((h$5.s0.x.min < (h$5.s0.x.max + -6)), int32(ceil_f32(float32((h$5.s0.x.min/2)))), int32(ceil_f32(float32(((h$5.s0.x.max + -7)/2)))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$4881) min: f$5.s0.x; max: f$5.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$4883) min: g$5.s0.x; max: g$5.s0.x
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0

  a_copy[i].min: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].min: min(int32(ceil_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].min: int32(ceil_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

  a_copy[i].max: max(int32(floor_f32(float32(((h$5.s0.x.v4 + h$5.s0.x.v4.base)/2)))), ((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))
  a[i].max: int32(floor_f32(float32(((h$5.s0.x.v4.base + h$5.s0.x.v4)/2))))

OVERLAP BOXES
  Box A:
Used: (undefined)
Dim (_interval$4885) min: (h$5.s0.x.v4.base + h$5.s0.x.v4); max: (h$5.s0.x.v4.base + h$5.s0.x.v4)
  Box B:
Used: (undefined)
boxes_overlap_halide? 0
boxes_overlap_nfm? 0
