mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/print.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_print -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_print
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/process_some_tiles.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_process_some_tiles -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_process_some_tiles

  a_copy[i].min: min(((brighter.s0.x.min*16) + brighter.s0.xi.min), ((output_tiles.s0.x.min*16) + output_tiles.s0.xi.min))
  a[i].min: min((output_tiles.s0.xi.min + (output_tiles.s0.x.min*16)), (brighter.s0.xi.min + (brighter.s0.x.min*16)))

  a_copy[i].max: max(((brighter.s0.x.max*16) + brighter.s0.xi.max), ((output_tiles.s0.x.max*16) + output_tiles.s0.xi.max))
  a[i].max: max((output_tiles.s0.xi.max + (output_tiles.s0.x.max*16)), (brighter.s0.xi.max + (brighter.s0.x.max*16)))

  a_copy[i].min: min(((brighter.s0.y.min*16) + brighter.s0.yi.min), ((output_tiles.s0.y.min*16) + output_tiles.s0.yi.min))
  a[i].min: min((output_tiles.s0.yi.min + (output_tiles.s0.y.min*16)), (brighter.s0.yi.min + (brighter.s0.y.min*16)))

  a_copy[i].max: max(((brighter.s0.y.max*16) + brighter.s0.yi.max), ((output_tiles.s0.y.max*16) + output_tiles.s0.yi.max))
  a[i].max: max((output_tiles.s0.yi.max + (output_tiles.s0.y.max*16)), (brighter.s0.yi.max + (brighter.s0.y.max*16)))

  a_copy[i].max: max((16 - 1), output_tiles.s0.xi.max)
  a[i].max: max(output_tiles.s0.xi.max, 15)

  a_copy[i].max: max((16 - 1), output_tiles.s0.yi.max)
  a[i].max: max(output_tiles.s0.yi.max, 15)

  a_copy[i].min: min(((output.s0.x.min + (0 + 0))/16), output_tiles.s0.x.min)
  a[i].min: min(int32(ceil_f32(float32((output.s0.x.min/16)))), output_tiles.s0.x.min)

  a_copy[i].max: max(((((((output.s0.x.max - output.s0.x.min)/16)*16) + output.s0.x.min) + (12 + 3))/16), output_tiles.s0.x.max)
  a[i].max: max(int32(floor_f32(float32(((output.s0.x.max + 15)/16)))), output_tiles.s0.x.max)

  a_copy[i].min: min(((output.s0.y.min + 0)/16), output_tiles.s0.y.min)
  a[i].min: min(int32(ceil_f32(float32((output.s0.y.min/16)))), output_tiles.s0.y.min)

  a_copy[i].max: max(((((((output.s0.y.max - output.s0.y.min)/16)*16) + output.s0.y.min) + 15)/16), output_tiles.s0.y.max)
  a[i].max: max(int32(floor_f32(float32(((output.s0.y.max + 15)/16)))), output_tiles.s0.y.max)

  a_copy[i].min: ((output_tiles.s0.x.min*16) + output_tiles.s0.xi.min)
  a[i].min: (output_tiles.s0.xi.min + (output_tiles.s0.x.min*16))

  a_copy[i].max: ((output_tiles.s0.x.max*16) + output_tiles.s0.xi.max)
  a[i].max: (output_tiles.s0.xi.max + (output_tiles.s0.x.max*16))

  a_copy[i].min: ((output_tiles.s0.y.min*16) + output_tiles.s0.yi.min)
  a[i].min: (output_tiles.s0.yi.min + (output_tiles.s0.y.min*16))

  a_copy[i].max: ((output_tiles.s0.y.max*16) + output_tiles.s0.yi.max)
  a[i].max: (output_tiles.s0.yi.max + (output_tiles.s0.y.max*16))

  a_copy[i].max: max((16 - 1), output_tiles.s0.xi.max)
  a[i].max: max(output_tiles.s0.xi.max, 15)

  a_copy[i].max: max((16 - 1), output_tiles.s0.yi.max)
  a[i].max: max(output_tiles.s0.yi.max, 15)

  a_copy[i].min: min(((output.s0.x.xi.base + (((output.s0.x.xi.xi.loop_min*4) + output.s0.x.xi.loop_min) + output.s0.x.xi.v0.loop_min))/16), output_tiles.s0.x.min)
  a[i].min: min(int32(ceil_f32(float32(((((output.s0.x.xi.v0.loop_min + output.s0.x.xi.loop_min) + (output.s0.x.xi.xi.loop_min*4)) + output.s0.x.xi.base)/16)))), output_tiles.s0.x.min)

  a_copy[i].max: max(((output.s0.x.xi.base + (((((output.s0.x.xi.xi.loop_extent + output.s0.x.xi.xi.loop_min)*4) + output.s0.x.xi.loop_min) + -4) + ((output.s0.x.xi.v0.loop_extent + output.s0.x.xi.v0.loop_min) - 1)))/16), output_tiles.s0.x.max)
  a[i].max: max(int32(floor_f32(float32((((((((output.s0.x.xi.v0.loop_min + output.s0.x.xi.v0.loop_extent) + output.s0.x.xi.loop_min) + (output.s0.x.xi.xi.loop_min*4)) + (output.s0.x.xi.xi.loop_extent*4)) + output.s0.x.xi.base) + -5)/16)))), output_tiles.s0.x.max)

  a_copy[i].min: min(((output.s0.y.yi.base + output.s0.y.yi.loop_min)/16), output_tiles.s0.y.min)
  a[i].min: min(int32(ceil_f32(float32(((output.s0.y.yi.loop_min + output.s0.y.yi.base)/16)))), output_tiles.s0.y.min)

  a_copy[i].max: max(((output.s0.y.yi.base + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))/16), output_tiles.s0.y.max)
  a[i].max: max(int32(floor_f32(float32(((((output.s0.y.yi.loop_min + output.s0.y.yi.loop_extent) + output.s0.y.yi.base) + -1)/16)))), output_tiles.s0.y.max)

  a_copy[i].min: min(((brighter.s0.x.min*16) + brighter.s0.xi.min), ((output_tiles.s0.x*16) + output_tiles.s0.xi.loop_min))
  a[i].min: min((output_tiles.s0.xi.loop_min + (output_tiles.s0.x*16)), (brighter.s0.xi.min + (brighter.s0.x.min*16)))

  a_copy[i].max: max(((brighter.s0.x.max*16) + brighter.s0.xi.max), ((output_tiles.s0.x*16) + ((output_tiles.s0.xi.loop_extent + output_tiles.s0.xi.loop_min) - 1)))
  a[i].max: max((brighter.s0.xi.max + (brighter.s0.x.max*16)), (((output_tiles.s0.xi.loop_min + output_tiles.s0.xi.loop_extent) + (output_tiles.s0.x*16)) + -1))

  a_copy[i].min: min(((brighter.s0.y.min*16) + brighter.s0.yi.min), ((output_tiles.s0.y*16) + output_tiles.s0.yi.loop_min))
  a[i].min: min((output_tiles.s0.yi.loop_min + (output_tiles.s0.y*16)), (brighter.s0.yi.min + (brighter.s0.y.min*16)))

  a_copy[i].max: max(((brighter.s0.y.max*16) + brighter.s0.yi.max), ((output_tiles.s0.y*16) + ((output_tiles.s0.yi.loop_extent + output_tiles.s0.yi.loop_min) - 1)))
  a[i].max: max((brighter.s0.yi.max + (brighter.s0.y.max*16)), (((output_tiles.s0.yi.loop_min + output_tiles.s0.yi.loop_extent) + (output_tiles.s0.y*16)) + -1))

  a_copy[i].max: max(((output_tiles.s0.xi.loop_extent + output_tiles.s0.xi.loop_min) - 1), brighter.s0.xi.max)
  a[i].max: max(brighter.s0.xi.max, ((output_tiles.s0.xi.loop_min + output_tiles.s0.xi.loop_extent) + -1))

  a_copy[i].max: max(((output_tiles.s0.yi.loop_extent + output_tiles.s0.yi.loop_min) - 1), brighter.s0.yi.max)
  a[i].max: max(brighter.s0.yi.max, ((output_tiles.s0.yi.loop_min + output_tiles.s0.yi.loop_extent) + -1))
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/random.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_random -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_random

  a_copy[i].max: max(sum$3.s1.b0.x$r.max, (1024 - 1))
  a[i].max: max(sum$3.s1.b0.x$r.max, 1023)

  a_copy[i].max: max(sum$3.s1.b0.x$r.max, (1024 - 1))
  a[i].max: max(sum$3.s1.b0.x$r.max, 1023)

  a_copy[i].max: max(sum$3.s1.b0.x$r.max, (1024 - 1))
  a[i].max: max(sum$3.s1.b0.x$r.max, 1023)

  a_copy[i].max: max(sum$4.s1.b0.x$r.max, (1024 - 1))
  a[i].max: max(sum$4.s1.b0.x$r.max, 1023)

  a_copy[i].max: max(sum$4.s1.b0.x$r.max, (1024 - 1))
  a[i].max: max(sum$4.s1.b0.x$r.max, 1023)

  a_copy[i].max: max(sum$4.s1.b0.x$r.max, (1024 - 1))
  a[i].max: max(sum$4.s1.b0.x$r.max, 1023)

  a_copy[i].max: max(sum$5.s1.b0.y$r.max, (1024 - 1))
  a[i].max: max(sum$5.s1.b0.y$r.max, 1023)

  a_copy[i].max: max(sum$5.s1.b0.y$r.max, (1024 - 1))
  a[i].max: max(sum$5.s1.b0.y$r.max, 1023)

  a_copy[i].max: max(sum$5.s1.b0.y$r.max, (1024 - 1))
  a[i].max: max(sum$5.s1.b0.y$r.max, 1023)

  a_copy[i].max: max(sum$6.s1.b0.y$r.max, (1024 - 1))
  a[i].max: max(sum$6.s1.b0.y$r.max, 1023)

  a_copy[i].max: max(sum$6.s1.b0.y$r.max, (1024 - 1))
  a[i].max: max(sum$6.s1.b0.y$r.max, 1023)

  a_copy[i].max: max(sum$6.s1.b0.y$r.max, (1024 - 1))
  a[i].max: max(sum$6.s1.b0.y$r.max, 1023)
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/realize_larger_than_two_gigs.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_realize_larger_than_two_gigs -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_realize_larger_than_two_gigs
Expected: Total allocation for buffer big is 4294967296, which exceeds the maximum size of 2147483647
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/realize_over_shifted_domain.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_realize_over_shifted_domain -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_realize_over_shifted_domain
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/reduction_chain.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_reduction_chain -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_reduction_chain

  a_copy[i].min: min((g.s1.x.min - 1), (g.s1.x.min + 1))
  a[i].min: (g.s1.x.min + -1)

  a_copy[i].max: max((g.s1.x.max - 1), (g.s1.x.max + 1))
  a[i].max: (g.s1.x.max + 1)

  a_copy[i].min: min(g.s1.x.min, (g.s2.y.min - 1))
  a[i].min: min(g.s1.x.min, (g.s2.y.min + -1))

  a_copy[i].max: max(g.s1.x.max, (g.s2.y.max - 1))
  a[i].max: max(g.s1.x.max, (g.s2.y.max + -1))

  a_copy[i].min: min((g.s1.x.min + -1), g.s2.y.min)
  a[i].min: min(g.s2.y.min, (g.s1.x.min + -1))

  a_copy[i].max: max((g.s1.x.max + 1), g.s2.y.max)
  a[i].max: max(g.s2.y.max, (g.s1.x.max + 1))

  a_copy[i].min: min(min(g.s1.x.min, (g.s2.y.min + -1)), (g.s2.y.min + 1))
  a[i].min: min(g.s1.x.min, (g.s2.y.min + -1))

  a_copy[i].max: max(max(g.s1.x.max, (g.s2.y.max + -1)), (g.s2.y.max + 1))
  a[i].max: max(g.s1.x.max, (g.s2.y.max + 1))

  a_copy[i].min: min(min(g.s2.y.min, (g.s1.x.min + -1)), g.s2.y.min)
  a[i].min: min(g.s2.y.min, (g.s1.x.min + -1))

  a_copy[i].max: max(max(g.s2.y.max, (g.s1.x.max + 1)), g.s2.y.max)
  a[i].max: max(g.s2.y.max, (g.s1.x.max + 1))

  a_copy[i].min: min(min(g.s1.x.min, (g.s2.y.min + -1)), g.s3.x.min)
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1)))

  a_copy[i].max: max(max(g.s1.x.max, (g.s2.y.max + 1)), g.s3.x.max)
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1)))

  a_copy[i].min: min(min(g.s2.y.min, (g.s1.x.min + -1)), (g.s3.x.min - 1))
  a[i].min: min(g.s2.y.min, (min(g.s3.x.min, g.s1.x.min) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (g.s1.x.max + 1)), (g.s3.x.max - 1))
  a[i].max: max(g.s2.y.max, max((g.s3.x.max + -1), (g.s1.x.max + 1)))

  a_copy[i].min: min(min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1))), g.s3.x.min)
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1)))

  a_copy[i].max: max(max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1))), g.s3.x.max)
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1)))

  a_copy[i].min: min(min(g.s2.y.min, (min(g.s3.x.min, g.s1.x.min) + -1)), (g.s3.x.min + 1))
  a[i].min: min(g.s2.y.min, min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1)))

  a_copy[i].max: max(max(g.s2.y.max, max((g.s3.x.max + -1), (g.s1.x.max + 1))), (g.s3.x.max + 1))
  a[i].max: max(g.s2.y.max, max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1))))

  a_copy[i].min: min(min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1))), (out.s0.x.min - 1))
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (min(out.s0.x.min, g.s2.y.min) + -1)))

  a_copy[i].max: max(max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1))), (out.s0.x.max - 1))
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, max((out.s0.x.max + -1), (g.s2.y.max + 1))))

  a_copy[i].min: min(min(g.s2.y.min, min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1))), (out.s0.y.min - 1))
  a[i].min: min(g.s2.y.min, min((out.s0.y.min + -1), min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1))))

  a_copy[i].max: max(max(g.s2.y.max, max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1)))), (out.s0.y.max - 1))
  a[i].max: max(g.s2.y.max, max((out.s0.y.max + -1), max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1)))))

  a_copy[i].min: min(min(g.s3.x.min, min(g.s1.x.min, (min(out.s0.x.min, g.s2.y.min) + -1))), (out.s0.x.min + 1))
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, min((out.s0.x.min + 1), (min(out.s0.x.min, g.s2.y.min) + -1))))

  a_copy[i].max: max(max(g.s3.x.max, max(g.s1.x.max, max((out.s0.x.max + -1), (g.s2.y.max + 1)))), (out.s0.x.max + 1))
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, max((out.s0.x.max + 1), max((out.s0.x.max + -1), (g.s2.y.max + 1)))))

  a_copy[i].min: min(min(g.s2.y.min, min((out.s0.y.min + -1), min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1)))), (out.s0.y.min + 1))
  a[i].min: min(g.s2.y.min, min((out.s0.y.min + 1), min((out.s0.y.min + -1), min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1)))))

  a_copy[i].max: max(max(g.s2.y.max, max((out.s0.y.max + -1), max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1))))), (out.s0.y.max + 1))
  a[i].max: max(g.s2.y.max, max((out.s0.y.max + 1), max((out.s0.y.max + -1), max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1))))))

  a_copy[i].min: min(g.s0.x.min, g.s1.x.min)
  a[i].min: min(g.s1.x.min, g.s0.x.min)

  a_copy[i].max: max(g.s0.x.max, g.s1.x.max)
  a[i].max: max(g.s1.x.max, g.s0.x.max)

  a_copy[i].min: min(g.s0.y.min, g.s1.x.min)
  a[i].min: min(g.s1.x.min, g.s0.y.min)

  a_copy[i].max: max(g.s0.y.max, g.s1.x.max)
  a[i].max: max(g.s1.x.max, g.s0.y.max)

  a_copy[i].min: min(min(g.s1.x.min, g.s0.x.min), g.s2.y.min)
  a[i].min: min(g.s2.y.min, min(g.s1.x.min, g.s0.x.min))

  a_copy[i].max: max(max(g.s1.x.max, g.s0.x.max), g.s2.y.max)
  a[i].max: max(g.s2.y.max, max(g.s1.x.max, g.s0.x.max))

  a_copy[i].min: min(min(g.s1.x.min, g.s0.y.min), g.s2.y.min)
  a[i].min: min(g.s2.y.min, min(g.s1.x.min, g.s0.y.min))

  a_copy[i].max: max(max(g.s1.x.max, g.s0.y.max), g.s2.y.max)
  a[i].max: max(g.s2.y.max, max(g.s1.x.max, g.s0.y.max))

  a_copy[i].min: min(min(g.s2.y.min, min(g.s1.x.min, g.s0.x.min)), g.s3.x.min)
  a[i].min: min(g.s3.x.min, min(g.s2.y.min, min(g.s1.x.min, g.s0.x.min)))

  a_copy[i].max: max(max(g.s2.y.max, max(g.s1.x.max, g.s0.x.max)), g.s3.x.max)
  a[i].max: max(g.s3.x.max, max(g.s2.y.max, max(g.s1.x.max, g.s0.x.max)))

  a_copy[i].min: min(min(g.s2.y.min, min(g.s1.x.min, g.s0.y.min)), g.s3.x.min)
  a[i].min: min(g.s3.x.min, min(g.s2.y.min, min(g.s1.x.min, g.s0.y.min)))

  a_copy[i].max: max(max(g.s2.y.max, max(g.s1.x.max, g.s0.y.max)), g.s3.x.max)
  a[i].max: max(g.s3.x.max, max(g.s2.y.max, max(g.s1.x.max, g.s0.y.max)))

  a_copy[i].min: min(min(g.s3.x.min, min(g.s1.x.min, min((out.s0.x.min + 1), (min(out.s0.x.min, g.s2.y.min) + -1)))), min(g.s3.x.min, min(g.s2.y.min, min(g.s1.x.min, g.s0.x.min))))
  a[i].min: min(g.s3.x.min, min(g.s2.y.min, min(g.s1.x.min, min(g.s0.x.min, min((out.s0.x.min + 1), (min(out.s0.x.min, g.s2.y.min) + -1))))))

  a_copy[i].max: max(max(g.s3.x.max, max(g.s1.x.max, max((out.s0.x.max + 1), max((out.s0.x.max + -1), (g.s2.y.max + 1))))), max(g.s3.x.max, max(g.s2.y.max, max(g.s1.x.max, g.s0.x.max))))
  a[i].max: max(g.s3.x.max, max(g.s2.y.max, max(g.s1.x.max, max(g.s0.x.max, max((out.s0.x.max + 1), max((out.s0.x.max + -1), (g.s2.y.max + 1)))))))

  a_copy[i].min: min(min(g.s2.y.min, min((out.s0.y.min + 1), min((out.s0.y.min + -1), min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1))))), min(g.s3.x.min, min(g.s2.y.min, min(g.s1.x.min, g.s0.y.min))))
  a[i].min: min(g.s3.x.min, min(g.s2.y.min, min(g.s1.x.min, min(g.s0.y.min, min((out.s0.y.min + 1), min((out.s0.y.min + -1), min((g.s3.x.min + 1), (min(g.s3.x.min, g.s1.x.min) + -1))))))))

  a_copy[i].max: max(max(g.s2.y.max, max((out.s0.y.max + 1), max((out.s0.y.max + -1), max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1)))))), max(g.s3.x.max, max(g.s2.y.max, max(g.s1.x.max, g.s0.y.max))))
  a[i].max: max(g.s3.x.max, max(g.s2.y.max, max(g.s1.x.max, max(g.s0.y.max, max((out.s0.y.max + 1), max((out.s0.y.max + -1), max((g.s3.x.max + 1), max((g.s3.x.max + -1), (g.s1.x.max + 1)))))))))

  a_copy[i].min: min((g.s1.x.min - 1), (g.s1.x.min + 1))
  a[i].min: (g.s1.x.min + -1)

  a_copy[i].max: max((g.s1.x.max - 1), (g.s1.x.max + 1))
  a[i].max: (g.s1.x.max + 1)

  a_copy[i].min: min((g.s2.y.min - 1), (g.s2.y.min + 1))
  a[i].min: (g.s2.y.min + -1)

  a_copy[i].max: max((g.s2.y.max - 1), (g.s2.y.max + 1))
  a[i].max: (g.s2.y.max + 1)

  a_copy[i].min: min((g.s3.x.min - 1), (g.s3.x.min + 1))
  a[i].min: (g.s3.x.min + -1)

  a_copy[i].max: max((g.s3.x.max - 1), (g.s3.x.max + 1))
  a[i].max: (g.s3.x.max + 1)

  a_copy[i].min: min((out.s0.x.min - 1), (out.s0.x.min + 1))
  a[i].min: (out.s0.x.min + -1)

  a_copy[i].max: max((out.s0.x.max - 1), (out.s0.x.max + 1))
  a[i].max: (out.s0.x.max + 1)

  a_copy[i].min: min((out.s0.y.min - 1), (out.s0.y.min + 1))
  a[i].min: (out.s0.y.min + -1)

  a_copy[i].max: max((out.s0.y.max - 1), (out.s0.y.max + 1))
  a[i].max: (out.s0.y.max + 1)

  a_copy[i].min: min((g.s1.x.min + -1), g.s2.y.min)
  a[i].min: min(g.s2.y.min, (g.s1.x.min + -1))

  a_copy[i].max: max((g.s1.x.max + 1), g.s2.y.max)
  a[i].max: max(g.s2.y.max, (g.s1.x.max + 1))

  a_copy[i].min: min(min(g.s1.x.min, (g.s2.y.min + -1)), g.s3.x.min)
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1)))

  a_copy[i].max: max(max(g.s1.x.max, (g.s2.y.max + 1)), g.s3.x.max)
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1)))

  a_copy[i].min: min(min(g.s2.y.min, (g.s1.x.min + -1)), (g.s3.x.min + -1))
  a[i].min: min(g.s2.y.min, (min(g.s3.x.min, g.s1.x.min) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (g.s1.x.max + 1)), (g.s3.x.max + 1))
  a[i].max: max(g.s2.y.max, (max(g.s3.x.max, g.s1.x.max) + 1))

  a_copy[i].min: min(min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1))), (out.s0.x.min + -1))
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (min(out.s0.x.min, g.s2.y.min) + -1)))

  a_copy[i].max: max(max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1))), (out.s0.x.max + 1))
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, (max(out.s0.x.max, g.s2.y.max) + 1)))

  a_copy[i].min: min(min(g.s2.y.min, (min(g.s3.x.min, g.s1.x.min) + -1)), (out.s0.y.min + -1))
  a[i].min: min(g.s2.y.min, (min(out.s0.y.min, min(g.s3.x.min, g.s1.x.min)) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (max(g.s3.x.max, g.s1.x.max) + 1)), (out.s0.y.max + 1))
  a[i].max: max(g.s2.y.max, (max(out.s0.y.max, max(g.s3.x.max, g.s1.x.max)) + 1))

  a_copy[i].min: min((g.s2.y.min + -1), g.s3.x.min)
  a[i].min: min(g.s3.x.min, (g.s2.y.min + -1))

  a_copy[i].max: max((g.s2.y.max + 1), g.s3.x.max)
  a[i].max: max(g.s3.x.max, (g.s2.y.max + 1))

  a_copy[i].min: min(min(g.s3.x.min, (g.s2.y.min + -1)), (out.s0.x.min + -1))
  a[i].min: min(g.s3.x.min, (min(out.s0.x.min, g.s2.y.min) + -1))

  a_copy[i].max: max(max(g.s3.x.max, (g.s2.y.max + 1)), (out.s0.x.max + 1))
  a[i].max: max(g.s3.x.max, (max(out.s0.x.max, g.s2.y.max) + 1))

  a_copy[i].min: min(min(g.s2.y.min, (g.s3.x.min + -1)), (out.s0.y.min + -1))
  a[i].min: min(g.s2.y.min, (min(out.s0.y.min, g.s3.x.min) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (g.s3.x.max + 1)), (out.s0.y.max + 1))
  a[i].max: max(g.s2.y.max, (max(out.s0.y.max, g.s3.x.max) + 1))

  a_copy[i].min: min((g.s3.x.min + -1), (out.s0.y.min + -1))
  a[i].min: (min(out.s0.y.min, g.s3.x.min) + -1)

  a_copy[i].max: max((g.s3.x.max + 1), (out.s0.y.max + 1))
  a[i].max: (max(out.s0.y.max, g.s3.x.max) + 1)

  a_copy[i].min: min((g.s1.x.min + -1), g.s2.y.min)
  a[i].min: min(g.s2.y.min, (g.s1.x.min + -1))

  a_copy[i].max: max((g.s1.x.max + 1), g.s2.y.max)
  a[i].max: max(g.s2.y.max, (g.s1.x.max + 1))

  a_copy[i].min: min(min(g.s1.x.min, (g.s2.y.min + -1)), g.s3.x.min)
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1)))

  a_copy[i].max: max(max(g.s1.x.max, (g.s2.y.max + 1)), g.s3.x.max)
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1)))

  a_copy[i].min: min(min(g.s2.y.min, (g.s1.x.min + -1)), (g.s3.x.min + -1))
  a[i].min: min(g.s2.y.min, (min(g.s3.x.min, g.s1.x.min) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (g.s1.x.max + 1)), (g.s3.x.max + 1))
  a[i].max: max(g.s2.y.max, (max(g.s3.x.max, g.s1.x.max) + 1))

  a_copy[i].min: min(min(g.s3.x.min, min(g.s1.x.min, (g.s2.y.min + -1))), (out.s0.x.min + -1))
  a[i].min: min(g.s3.x.min, min(g.s1.x.min, (min(out.s0.x.min, g.s2.y.min) + -1)))

  a_copy[i].max: max(max(g.s3.x.max, max(g.s1.x.max, (g.s2.y.max + 1))), (out.s0.x.max + 1))
  a[i].max: max(g.s3.x.max, max(g.s1.x.max, (max(out.s0.x.max, g.s2.y.max) + 1)))

  a_copy[i].min: min(min(g.s2.y.min, (min(g.s3.x.min, g.s1.x.min) + -1)), (out.s0.y.min + -1))
  a[i].min: min(g.s2.y.min, (min(out.s0.y.min, min(g.s3.x.min, g.s1.x.min)) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (max(g.s3.x.max, g.s1.x.max) + 1)), (out.s0.y.max + 1))
  a[i].max: max(g.s2.y.max, (max(out.s0.y.max, max(g.s3.x.max, g.s1.x.max)) + 1))

  a_copy[i].min: min((g.s2.y.min + -1), g.s3.x.min)
  a[i].min: min(g.s3.x.min, (g.s2.y.min + -1))

  a_copy[i].max: max((g.s2.y.max + 1), g.s3.x.max)
  a[i].max: max(g.s3.x.max, (g.s2.y.max + 1))

  a_copy[i].min: min(min(g.s3.x.min, (g.s2.y.min + -1)), (out.s0.x.min + -1))
  a[i].min: min(g.s3.x.min, (min(out.s0.x.min, g.s2.y.min) + -1))

  a_copy[i].max: max(max(g.s3.x.max, (g.s2.y.max + 1)), (out.s0.x.max + 1))
  a[i].max: max(g.s3.x.max, (max(out.s0.x.max, g.s2.y.max) + 1))

  a_copy[i].min: min(min(g.s2.y.min, (g.s3.x.min + -1)), (out.s0.y.min + -1))
  a[i].min: min(g.s2.y.min, (min(out.s0.y.min, g.s3.x.min) + -1))

  a_copy[i].max: max(max(g.s2.y.max, (g.s3.x.max + 1)), (out.s0.y.max + 1))
  a[i].max: max(g.s2.y.max, (max(out.s0.y.max, g.s3.x.max) + 1))

  a_copy[i].min: min((g.s3.x.min + -1), (out.s0.y.min + -1))
  a[i].min: (min(out.s0.y.min, g.s3.x.min) + -1)

  a_copy[i].max: max((g.s3.x.max + 1), (out.s0.y.max + 1))
  a[i].max: (max(out.s0.y.max, g.s3.x.max) + 1)

  a_copy[i].min: (min(out.s0.x.min, (min(out.s0.y.min, (out.s0.x.min + -1)) + -1)) + -1)
  a[i].min: select((out.s0.y.min < out.s0.x.min), (out.s0.y.min + -2), (out.s0.x.min + -3))

  a_copy[i].max: (max(out.s0.x.max, (max(out.s0.y.max, (out.s0.x.max + 1)) + 1)) + 1)
  a[i].max: max((out.s0.y.max + 2), (out.s0.x.max + 3))

  a_copy[i].min: min(((min(out.s0.x.min, (min(out.s0.y.min, (out.s0.x.min + -1)) + -1)) + -1) - 1), ((min(out.s0.x.min, (min(out.s0.y.min, (out.s0.x.min + -1)) + -1)) + -1) + 1))
  a[i].min: select((out.s0.y.min < out.s0.x.min), (out.s0.y.min + -3), (out.s0.x.min + -4))

  a_copy[i].max: max(((max(out.s0.x.max, (max(out.s0.y.max, (out.s0.x.max + 1)) + 1)) + 1) - 1), ((max(out.s0.x.max, (max(out.s0.y.max, (out.s0.x.max + 1)) + 1)) + 1) + 1))
  a[i].max: max((out.s0.y.max + 3), (out.s0.x.max + 4))
