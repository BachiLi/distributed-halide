mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/convolution_multiple_kernels.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_convolution_multiple_kernels -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_convolution_multiple_kernels

  a_copy[i].min: min((sum$2.s1.x.min + sum$2.s1.r.x$r.min), (sum.s1.x.min + sum.s1.r.x$r.min))
  a[i].min: min((sum.s1.r.x$r.min + sum.s1.x.min), (sum$2.s1.r.x$r.min + sum$2.s1.x.min))

  a_copy[i].max: max((sum$2.s1.x.max + sum$2.s1.r.x$r.max), (sum.s1.x.max + sum.s1.r.x$r.max))
  a[i].max: max((sum.s1.r.x$r.max + sum.s1.x.max), (sum$2.s1.r.x$r.max + sum$2.s1.x.max))

  a_copy[i].min: min((sum$2.s1.y.min + sum$2.s1.r.y$r.min), (sum.s1.y.min + sum.s1.r.y$r.min))
  a[i].min: min((sum.s1.r.y$r.min + sum.s1.y.min), (sum$2.s1.r.y$r.min + sum$2.s1.y.min))

  a_copy[i].max: max((sum$2.s1.y.max + sum$2.s1.r.y$r.max), (sum.s1.y.max + sum.s1.r.y$r.max))
  a[i].max: max((sum.s1.r.y$r.max + sum.s1.y.max), (sum$2.s1.r.y$r.max + sum$2.s1.y.max))

  a_copy[i].min: min(sum$2.s0.x.min, sum$2.s1.x.min)
  a[i].min: min(sum$2.s1.x.min, sum$2.s0.x.min)

  a_copy[i].max: max(sum$2.s0.x.max, sum$2.s1.x.max)
  a[i].max: max(sum$2.s1.x.max, sum$2.s0.x.max)

  a_copy[i].min: min(sum$2.s0.y.min, sum$2.s1.y.min)
  a[i].min: min(sum$2.s1.y.min, sum$2.s0.y.min)

  a_copy[i].max: max(sum$2.s0.y.max, sum$2.s1.y.max)
  a[i].max: max(sum$2.s1.y.max, sum$2.s0.y.max)

  a_copy[i].min: min(sum.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, sum.s0.x.min)

  a_copy[i].max: max(sum.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, sum.s0.x.max)

  a_copy[i].min: min(sum.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, sum.s0.y.min)

  a_copy[i].max: max(sum.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, sum.s0.y.max)

  a_copy[i].min: min(min((sum.s1.r.x$r.min + sum.s1.x.min), (sum$2.s1.r.x$r.min + sum$2.s1.x.min)), input.s0.x.min)
  a[i].min: min(input.s0.x.min, min((sum.s1.x.min + sum.s1.r.x$r.min), (sum$2.s1.x.min + sum$2.s1.r.x$r.min)))

  a_copy[i].max: max(max((sum.s1.r.x$r.max + sum.s1.x.max), (sum$2.s1.r.x$r.max + sum$2.s1.x.max)), input.s0.x.max)
  a[i].max: max(input.s0.x.max, max((sum.s1.x.max + sum.s1.r.x$r.max), (sum$2.s1.x.max + sum$2.s1.r.x$r.max)))

  a_copy[i].min: min(min((sum.s1.r.y$r.min + sum.s1.y.min), (sum$2.s1.r.y$r.min + sum$2.s1.y.min)), input.s0.y.min)
  a[i].min: min(input.s0.y.min, min((sum.s1.y.min + sum.s1.r.y$r.min), (sum$2.s1.y.min + sum$2.s1.r.y$r.min)))

  a_copy[i].max: max(max((sum.s1.r.y$r.max + sum.s1.y.max), (sum$2.s1.r.y$r.max + sum$2.s1.y.max)), input.s0.y.max)
  a[i].max: max(input.s0.y.max, max((sum.s1.y.max + sum.s1.r.y$r.max), (sum$2.s1.y.max + sum$2.s1.r.y$r.max)))

  a_copy[i].min: min(min(sum.s1.x.min, blur.s0.x.min), min(sum.s1.x.min, sum.s0.x.min))
  a[i].min: min(sum.s1.x.min, min(sum.s0.x.min, blur.s0.x.min))

  a_copy[i].max: max(max(sum.s1.x.max, blur.s0.x.max), max(sum.s1.x.max, sum.s0.x.max))
  a[i].max: max(sum.s1.x.max, max(sum.s0.x.max, blur.s0.x.max))

  a_copy[i].min: min(min(sum.s1.y.min, blur.s0.y.min), min(sum.s1.y.min, sum.s0.y.min))
  a[i].min: min(sum.s1.y.min, min(sum.s0.y.min, blur.s0.y.min))

  a_copy[i].max: max(max(sum.s1.y.max, blur.s0.y.max), max(sum.s1.y.max, sum.s0.y.max))
  a[i].max: max(sum.s1.y.max, max(sum.s0.y.max, blur.s0.y.max))

  a_copy[i].min: min(min(sum$2.s1.x.min, blur.s0.x.min), min(sum$2.s1.x.min, sum$2.s0.x.min))
  a[i].min: min(sum$2.s1.x.min, min(sum$2.s0.x.min, blur.s0.x.min))

  a_copy[i].max: max(max(sum$2.s1.x.max, blur.s0.x.max), max(sum$2.s1.x.max, sum$2.s0.x.max))
  a[i].max: max(sum$2.s1.x.max, max(sum$2.s0.x.max, blur.s0.x.max))

  a_copy[i].min: min(min(sum$2.s1.y.min, blur.s0.y.min), min(sum$2.s1.y.min, sum$2.s0.y.min))
  a[i].min: min(sum$2.s1.y.min, min(sum$2.s0.y.min, blur.s0.y.min))

  a_copy[i].max: max(max(sum$2.s1.y.max, blur.s0.y.max), max(sum$2.s1.y.max, sum$2.s0.y.max))
  a[i].max: max(sum$2.s1.y.max, max(sum$2.s0.y.max, blur.s0.y.max))

  a_copy[i].min: min(blur.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, blur.s0.x.min)

  a_copy[i].max: max(blur.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, blur.s0.x.max)

  a_copy[i].min: min(blur.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, blur.s0.y.min)

  a_copy[i].max: max(blur.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, blur.s0.y.max)

  a_copy[i].min: min(blur.s0.x.min, sum$2.s1.x.min)
  a[i].min: min(sum$2.s1.x.min, blur.s0.x.min)

  a_copy[i].max: max(blur.s0.x.max, sum$2.s1.x.max)
  a[i].max: max(sum$2.s1.x.max, blur.s0.x.max)

  a_copy[i].min: min(blur.s0.y.min, sum$2.s1.y.min)
  a[i].min: min(sum$2.s1.y.min, blur.s0.y.min)

  a_copy[i].max: max(blur.s0.y.max, sum$2.s1.y.max)
  a[i].max: max(sum$2.s1.y.max, blur.s0.y.max)

  a_copy[i].min: min((sum.s1.x.min + sum.s1.r.x$r.min), (sum$2.s1.x.min + sum$2.s1.r.x$r.min))
  a[i].min: min((sum.s1.r.x$r.min + sum.s1.x.min), (sum$2.s1.r.x$r.min + sum$2.s1.x.min))

  a_copy[i].max: max((sum.s1.x.max + sum.s1.r.x$r.max), (sum$2.s1.x.max + sum$2.s1.r.x$r.max))
  a[i].max: max((sum.s1.r.x$r.max + sum.s1.x.max), (sum$2.s1.r.x$r.max + sum$2.s1.x.max))

  a_copy[i].min: min((sum.s1.y.min + sum.s1.r.y$r.min), (sum$2.s1.y.min + sum$2.s1.r.y$r.min))
  a[i].min: min((sum.s1.r.y$r.min + sum.s1.y.min), (sum$2.s1.r.y$r.min + sum$2.s1.y.min))

  a_copy[i].max: max((sum.s1.y.max + sum.s1.r.y$r.max), (sum$2.s1.y.max + sum$2.s1.r.y$r.max))
  a[i].max: max((sum.s1.r.y$r.max + sum.s1.y.max), (sum$2.s1.r.y$r.max + sum$2.s1.y.max))

  a_copy[i].min: min(blur.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, blur.s0.x.min)

  a_copy[i].max: max(blur.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, blur.s0.x.max)

  a_copy[i].min: min(blur.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, blur.s0.y.min)

  a_copy[i].max: max(blur.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, blur.s0.y.max)

  a_copy[i].min: min(blur.s0.x.min, sum$2.s1.x.min)
  a[i].min: min(sum$2.s1.x.min, blur.s0.x.min)

  a_copy[i].max: max(blur.s0.x.max, sum$2.s1.x.max)
  a[i].max: max(sum$2.s1.x.max, blur.s0.x.max)

  a_copy[i].min: min(blur.s0.y.min, sum$2.s1.y.min)
  a[i].min: min(sum$2.s1.y.min, blur.s0.y.min)

  a_copy[i].max: max(blur.s0.y.max, sum$2.s1.y.max)
  a[i].max: max(sum$2.s1.y.max, blur.s0.y.max)

  a_copy[i].min: min((blur.s0.x.min + -1), input.s0.x.min)
  a[i].min: min(input.s0.x.min, (blur.s0.x.min + -1))

  a_copy[i].max: max((blur.s0.x.max + 1), input.s0.x.max)
  a[i].max: max(input.s0.x.max, (blur.s0.x.max + 1))

  a_copy[i].min: min((blur.s0.y.min + -1), input.s0.y.min)
  a[i].min: min(input.s0.y.min, (blur.s0.y.min + -1))

  a_copy[i].max: max((blur.s0.y.max + 1), input.s0.y.max)
  a[i].max: max(input.s0.y.max, (blur.s0.y.max + 1))

  a_copy[i].min: min((sum$2.s1.x.min + sum$2.s1.r.x$r.min), (sum.s1.x.min + sum.s1.r.x$r.min))
  a[i].min: min((sum.s1.r.x$r.min + sum.s1.x.min), (sum$2.s1.r.x$r.min + sum$2.s1.x.min))

  a_copy[i].max: max((sum$2.s1.x.max + sum$2.s1.r.x$r.max), (sum.s1.x.max + sum.s1.r.x$r.max))
  a[i].max: max((sum.s1.r.x$r.max + sum.s1.x.max), (sum$2.s1.r.x$r.max + sum$2.s1.x.max))

  a_copy[i].min: min((sum$2.s1.y.min + sum$2.s1.r.y$r.min), (sum.s1.y.min + sum.s1.r.y$r.min))
  a[i].min: min((sum.s1.r.y$r.min + sum.s1.y.min), (sum$2.s1.r.y$r.min + sum$2.s1.y.min))

  a_copy[i].max: max((sum$2.s1.y.max + sum$2.s1.r.y$r.max), (sum.s1.y.max + sum.s1.r.y$r.max))
  a[i].max: max((sum.s1.r.y$r.max + sum.s1.y.max), (sum$2.s1.r.y$r.max + sum$2.s1.y.max))

  a_copy[i].min: min(sum$2.s0.x.min, sum$2.s1.x.min)
  a[i].min: min(sum$2.s1.x.min, sum$2.s0.x.min)

  a_copy[i].max: max(sum$2.s0.x.max, sum$2.s1.x.max)
  a[i].max: max(sum$2.s1.x.max, sum$2.s0.x.max)

  a_copy[i].min: min(sum$2.s0.y.min, sum$2.s1.y.min)
  a[i].min: min(sum$2.s1.y.min, sum$2.s0.y.min)

  a_copy[i].max: max(sum$2.s0.y.max, sum$2.s1.y.max)
  a[i].max: max(sum$2.s1.y.max, sum$2.s0.y.max)

  a_copy[i].min: min(min(sum$2.s1.x.min, blur.s0.x), min(sum$2.s1.x.min, sum$2.s0.x.min))
  a[i].min: min(sum$2.s1.x.min, min(sum$2.s0.x.min, blur.s0.x))

  a_copy[i].max: max(max(sum$2.s1.x.max, blur.s0.x), max(sum$2.s1.x.max, sum$2.s0.x.max))
  a[i].max: max(sum$2.s1.x.max, max(sum$2.s0.x.max, blur.s0.x))

  a_copy[i].min: min(min(sum$2.s1.y.min, blur.s0.y), min(sum$2.s1.y.min, sum$2.s0.y.min))
  a[i].min: min(sum$2.s1.y.min, min(sum$2.s0.y.min, blur.s0.y))

  a_copy[i].max: max(max(sum$2.s1.y.max, blur.s0.y), max(sum$2.s1.y.max, sum$2.s0.y.max))
  a[i].max: max(sum$2.s1.y.max, max(sum$2.s0.y.max, blur.s0.y))

  a_copy[i].min: min(sum.s0.x.min, sum.s1.x.min)
  a[i].min: min(sum.s1.x.min, sum.s0.x.min)

  a_copy[i].max: max(sum.s0.x.max, sum.s1.x.max)
  a[i].max: max(sum.s1.x.max, sum.s0.x.max)

  a_copy[i].min: min(sum.s0.y.min, sum.s1.y.min)
  a[i].min: min(sum.s1.y.min, sum.s0.y.min)

  a_copy[i].max: max(sum.s0.y.max, sum.s1.y.max)
  a[i].max: max(sum.s1.y.max, sum.s0.y.max)

  a_copy[i].min: min(min(sum.s1.x.min, blur.s0.x), min(sum.s1.x.min, sum.s0.x.min))
  a[i].min: min(sum.s1.x.min, min(sum.s0.x.min, blur.s0.x))

  a_copy[i].max: max(max(sum.s1.x.max, blur.s0.x), max(sum.s1.x.max, sum.s0.x.max))
  a[i].max: max(sum.s1.x.max, max(sum.s0.x.max, blur.s0.x))

  a_copy[i].min: min(min(sum.s1.y.min, blur.s0.y), min(sum.s1.y.min, sum.s0.y.min))
  a[i].min: min(sum.s1.y.min, min(sum.s0.y.min, blur.s0.y))

  a_copy[i].max: max(max(sum.s1.y.max, blur.s0.y), max(sum.s1.y.max, sum.s0.y.max))
  a[i].max: max(sum.s1.y.max, max(sum.s0.y.max, blur.s0.y))
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/cross_compilation.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_cross_compilation -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_cross_compilation
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/custom_allocator.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_custom_allocator -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_custom_allocator
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/custom_error_reporter.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_custom_error_reporter -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_custom_error_reporter
Custom warning: Warning at /home/psuriana/distributed-halide/test/correctness/custom_error_reporter.cpp:40:
Here is a warning.
Custom error: Error at /home/psuriana/distributed-halide/test/correctness/custom_error_reporter.cpp:43:
Here is an error.
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/custom_lowering_pass.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_custom_lowering_pass -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_custom_lowering_pass
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/debug_to_file.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_debug_to_file -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_debug_to_file

  a_copy[i].min: min(g.s0.x.min, (g.s0.x.min + 1))
  a[i].min: g.s0.x.min

  a_copy[i].max: max(g.s0.x.max, (g.s0.x.max + 1))
  a[i].max: (g.s0.x.max + 1)

  a_copy[i].min: min(g.s0.x.min, h.s0.x.min)
  a[i].min: min(h.s0.x.min, g.s0.x.min)

  a_copy[i].max: max((g.s0.x.max + 1), h.s0.x.max)
  a[i].max: max(h.s0.x.max, (g.s0.x.max + 1))

  a_copy[i].min: min(g.s0.y.min, h.s0.y.min)
  a[i].min: min(h.s0.y.min, g.s0.y.min)

  a_copy[i].max: max(g.s0.y.max, h.s0.y.max)
  a[i].max: max(h.s0.y.max, g.s0.y.max)

  a_copy[i].min: min(min(h.s0.x.min, g.s0.x.min), f.s0.x.min)
  a[i].min: min(h.s0.x.min, min(g.s0.x.min, f.s0.x.min))

  a_copy[i].max: max(max(h.s0.x.max, (g.s0.x.max + 1)), f.s0.x.max)
  a[i].max: max(h.s0.x.max, max(f.s0.x.max, (g.s0.x.max + 1)))

  a_copy[i].min: min(min(h.s0.y.min, g.s0.y.min), f.s0.y.min)
  a[i].min: min(h.s0.y.min, min(g.s0.y.min, f.s0.y.min))

  a_copy[i].max: max(max(h.s0.y.max, g.s0.y.max), f.s0.y.max)
  a[i].max: max(h.s0.y.max, max(g.s0.y.max, f.s0.y.max))

  a_copy[i].min: min(g.s0.x.min, (g.s0.x.min + 1))
  a[i].min: g.s0.x.min

  a_copy[i].max: max(g.s0.x.max, (g.s0.x.max + 1))
  a[i].max: (g.s0.x.max + 1)

  a_copy[i].min: min(g.s0.x.min, h.s0.x.min)
  a[i].min: min(h.s0.x.min, g.s0.x.min)

  a_copy[i].max: max((g.s0.x.max + 1), h.s0.x.max)
  a[i].max: max(h.s0.x.max, (g.s0.x.max + 1))

  a_copy[i].min: min(g.s0.y.min, h.s0.y.min)
  a[i].min: min(h.s0.y.min, g.s0.y.min)

  a_copy[i].max: max(g.s0.y.max, h.s0.y.max)
  a[i].max: max(h.s0.y.max, g.s0.y.max)

  a_copy[i].min: min(g.s0.x.min, (g.s0.x.min + 1))
  a[i].min: g.s0.x.min

  a_copy[i].max: max(g.s0.x.max, (g.s0.x.max + 1))
  a[i].max: (g.s0.x.max + 1)

  a_copy[i].min: min(g.s0.x.min, h.s0.x.min)
  a[i].min: min(h.s0.x.min, g.s0.x.min)

  a_copy[i].max: max((g.s0.x.max + 1), h.s0.x.max)
  a[i].max: max(h.s0.x.max, (g.s0.x.max + 1))

  a_copy[i].min: min(g.s0.y.min, h.s0.y.min)
  a[i].min: min(h.s0.y.min, g.s0.y.min)

  a_copy[i].max: max(g.s0.y.max, h.s0.y.max)
  a[i].max: max(h.s0.y.max, g.s0.y.max)

  a_copy[i].min: min(min(h.s0.x.min, g.s0.x.min), f.s0.x.min)
  a[i].min: min(h.s0.x.min, min(g.s0.x.min, f.s0.x.min))

  a_copy[i].max: max(max(h.s0.x.max, (g.s0.x.max + 1)), f.s0.x.max)
  a[i].max: max(h.s0.x.max, max(f.s0.x.max, (g.s0.x.max + 1)))

  a_copy[i].min: min(min(h.s0.y.min, g.s0.y.min), f.s0.y.min)
  a[i].min: min(h.s0.y.min, min(g.s0.y.min, f.s0.y.min))

  a_copy[i].max: max(max(h.s0.y.max, g.s0.y.max), f.s0.y.max)
  a[i].max: max(h.s0.y.max, max(g.s0.y.max, f.s0.y.max))

  a_copy[i].min: min(g.s0.x.min, (g.s0.x.min + 1))
  a[i].min: g.s0.x.min

  a_copy[i].max: max(g.s0.x.max, (g.s0.x.max + 1))
  a[i].max: (g.s0.x.max + 1)

  a_copy[i].min: min(g.s0.x.min, h.s0.x.min)
  a[i].min: min(h.s0.x.min, g.s0.x.min)

  a_copy[i].max: max((g.s0.x.max + 1), h.s0.x.max)
  a[i].max: max(h.s0.x.max, (g.s0.x.max + 1))

  a_copy[i].min: min(g.s0.y.min, h.s0.y.min)
  a[i].min: min(h.s0.y.min, g.s0.y.min)

  a_copy[i].max: max(g.s0.y.max, h.s0.y.max)
  a[i].max: max(h.s0.y.max, g.s0.y.max)
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/deinterleave4.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_deinterleave4 -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_deinterleave4

  a_copy[i].min: min(((((f1.s0.x.min/2) + 1)/2) + 1), in.s0.x.min)
  a[i].min: min(int32(ceil_f32(float32(((f1.s0.x.min + 6)/4)))), in.s0.x.min)

  a_copy[i].max: max(((((f1.s0.x.max/2) + 1)/2) + 1), in.s0.x.max)
  a[i].max: max(int32(floor_f32(float32(((f1.s0.x.max + 6)/4)))), in.s0.x.max)

  a_copy[i].min: min(((((f1.s0.x.min/2) + 1)/2) + 1), in.s0.x.min)
  a[i].min: min(int32(ceil_f32(float32(((f1.s0.x.min + 6)/4)))), in.s0.x.min)

  a_copy[i].max: max(((((f1.s0.x.max/2) + 1)/2) + 1), in.s0.x.max)
  a[i].max: max(int32(floor_f32(float32(((f1.s0.x.max + 6)/4)))), in.s0.x.max)

  a_copy[i].min: min(((((f2.s0.x.min/2) + 1)/2) + 1), in$2.s0.x.min)
  a[i].min: min(int32(ceil_f32(float32(((f2.s0.x.min + 6)/4)))), in$2.s0.x.min)

  a_copy[i].max: max(((((f2.s0.x.max/2) + 1)/2) + 1), in$2.s0.x.max)
  a[i].max: max(int32(floor_f32(float32(((f2.s0.x.max + 6)/4)))), in$2.s0.x.max)

  a_copy[i].min: min(((((f2.s0.x.min/2) + 1)/2) + 1), in$2.s0.x.min)
  a[i].min: min(int32(ceil_f32(float32(((f2.s0.x.min + 6)/4)))), in$2.s0.x.min)

  a_copy[i].max: max(((((f2.s0.x.max/2) + 1)/2) + 1), in$2.s0.x.max)
  a[i].max: max(int32(floor_f32(float32(((f2.s0.x.max + 6)/4)))), in$2.s0.x.max)
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/div_mod.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_div_mod -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_div_mod
Test mod of float32
Test division of uint8x1
Test division of uint16x1
Test division of uint32x1
Test division of int8x1
Test division of int16x1
Test division of int32x1
Test division of uint8x2

  a_copy[i].min: (min(f$8.s0.x$7.min, (f$8.s0.x$7.max + -1)) + 0)
  a[i].min: min(f$8.s0.x$7.min, (f$8.s0.x$7.max + -1))

  a_copy[i].max: (min(((((f$8.s0.x$7.max - f$8.s0.x$7.min)/2)*2) + f$8.s0.x$7.min), (f$8.s0.x$7.max + -1)) + 1)
  a[i].max: f$8.s0.x$7.max

  a_copy[i].min: (min(f$8.s0.x$7.min, (f$8.s0.x$7.max + -1)) + 0)
  a[i].min: min(f$8.s0.x$7.min, (f$8.s0.x$7.max + -1))

  a_copy[i].max: (min(((((f$8.s0.x$7.max - f$8.s0.x$7.min)/2)*2) + f$8.s0.x$7.min), (f$8.s0.x$7.max + -1)) + 1)
  a[i].max: f$8.s0.x$7.max
Test division of uint16x2

  a_copy[i].min: (min(f$9.s0.x$8.min, (f$9.s0.x$8.max + -1)) + 0)
  a[i].min: min(f$9.s0.x$8.min, (f$9.s0.x$8.max + -1))

  a_copy[i].max: (min(((((f$9.s0.x$8.max - f$9.s0.x$8.min)/2)*2) + f$9.s0.x$8.min), (f$9.s0.x$8.max + -1)) + 1)
  a[i].max: f$9.s0.x$8.max

  a_copy[i].min: (min(f$9.s0.x$8.min, (f$9.s0.x$8.max + -1)) + 0)
  a[i].min: min(f$9.s0.x$8.min, (f$9.s0.x$8.max + -1))

  a_copy[i].max: (min(((((f$9.s0.x$8.max - f$9.s0.x$8.min)/2)*2) + f$9.s0.x$8.min), (f$9.s0.x$8.max + -1)) + 1)
  a[i].max: f$9.s0.x$8.max
Test division of uint32x2

  a_copy[i].min: (min(f$10.s0.x$9.min, (f$10.s0.x$9.max + -1)) + 0)
  a[i].min: min(f$10.s0.x$9.min, (f$10.s0.x$9.max + -1))

  a_copy[i].max: (min(((((f$10.s0.x$9.max - f$10.s0.x$9.min)/2)*2) + f$10.s0.x$9.min), (f$10.s0.x$9.max + -1)) + 1)
  a[i].max: f$10.s0.x$9.max

  a_copy[i].min: (min(f$10.s0.x$9.min, (f$10.s0.x$9.max + -1)) + 0)
  a[i].min: min(f$10.s0.x$9.min, (f$10.s0.x$9.max + -1))

  a_copy[i].max: (min(((((f$10.s0.x$9.max - f$10.s0.x$9.min)/2)*2) + f$10.s0.x$9.min), (f$10.s0.x$9.max + -1)) + 1)
  a[i].max: f$10.s0.x$9.max
Test division of int8x2

  a_copy[i].min: (min(f$11.s0.x$10.min, (f$11.s0.x$10.max + -1)) + 0)
  a[i].min: min(f$11.s0.x$10.min, (f$11.s0.x$10.max + -1))

  a_copy[i].max: (min(((((f$11.s0.x$10.max - f$11.s0.x$10.min)/2)*2) + f$11.s0.x$10.min), (f$11.s0.x$10.max + -1)) + 1)
  a[i].max: f$11.s0.x$10.max

  a_copy[i].min: (min(f$11.s0.x$10.min, (f$11.s0.x$10.max + -1)) + 0)
  a[i].min: min(f$11.s0.x$10.min, (f$11.s0.x$10.max + -1))

  a_copy[i].max: (min(((((f$11.s0.x$10.max - f$11.s0.x$10.min)/2)*2) + f$11.s0.x$10.min), (f$11.s0.x$10.max + -1)) + 1)
  a[i].max: f$11.s0.x$10.max
Test division of int16x2

  a_copy[i].min: (min(f$12.s0.x$11.min, (f$12.s0.x$11.max + -1)) + 0)
  a[i].min: min(f$12.s0.x$11.min, (f$12.s0.x$11.max + -1))

  a_copy[i].max: (min(((((f$12.s0.x$11.max - f$12.s0.x$11.min)/2)*2) + f$12.s0.x$11.min), (f$12.s0.x$11.max + -1)) + 1)
  a[i].max: f$12.s0.x$11.max

  a_copy[i].min: (min(f$12.s0.x$11.min, (f$12.s0.x$11.max + -1)) + 0)
  a[i].min: min(f$12.s0.x$11.min, (f$12.s0.x$11.max + -1))

  a_copy[i].max: (min(((((f$12.s0.x$11.max - f$12.s0.x$11.min)/2)*2) + f$12.s0.x$11.min), (f$12.s0.x$11.max + -1)) + 1)
  a[i].max: f$12.s0.x$11.max
Test division of int32x2

  a_copy[i].min: (min(f$13.s0.x$12.min, (f$13.s0.x$12.max + -1)) + 0)
  a[i].min: min(f$13.s0.x$12.min, (f$13.s0.x$12.max + -1))

  a_copy[i].max: (min(((((f$13.s0.x$12.max - f$13.s0.x$12.min)/2)*2) + f$13.s0.x$12.min), (f$13.s0.x$12.max + -1)) + 1)
  a[i].max: f$13.s0.x$12.max

  a_copy[i].min: (min(f$13.s0.x$12.min, (f$13.s0.x$12.max + -1)) + 0)
  a[i].min: min(f$13.s0.x$12.min, (f$13.s0.x$12.max + -1))

  a_copy[i].max: (min(((((f$13.s0.x$12.max - f$13.s0.x$12.min)/2)*2) + f$13.s0.x$12.min), (f$13.s0.x$12.max + -1)) + 1)
  a[i].max: f$13.s0.x$12.max
Test division of uint8x4

  a_copy[i].min: (min(f$14.s0.x$13.min, (f$14.s0.x$13.max + -3)) + 0)
  a[i].min: min(f$14.s0.x$13.min, (f$14.s0.x$13.max + -3))

  a_copy[i].max: (min(((((f$14.s0.x$13.max - f$14.s0.x$13.min)/4)*4) + f$14.s0.x$13.min), (f$14.s0.x$13.max + -3)) + 3)
  a[i].max: f$14.s0.x$13.max

  a_copy[i].min: (min(f$14.s0.x$13.min, (f$14.s0.x$13.max + -3)) + 0)
  a[i].min: min(f$14.s0.x$13.min, (f$14.s0.x$13.max + -3))

  a_copy[i].max: (min(((((f$14.s0.x$13.max - f$14.s0.x$13.min)/4)*4) + f$14.s0.x$13.min), (f$14.s0.x$13.max + -3)) + 3)
  a[i].max: f$14.s0.x$13.max
Test division of uint16x4

  a_copy[i].min: (min(f$15.s0.x$14.min, (f$15.s0.x$14.max + -3)) + 0)
  a[i].min: min(f$15.s0.x$14.min, (f$15.s0.x$14.max + -3))

  a_copy[i].max: (min(((((f$15.s0.x$14.max - f$15.s0.x$14.min)/4)*4) + f$15.s0.x$14.min), (f$15.s0.x$14.max + -3)) + 3)
  a[i].max: f$15.s0.x$14.max

  a_copy[i].min: (min(f$15.s0.x$14.min, (f$15.s0.x$14.max + -3)) + 0)
  a[i].min: min(f$15.s0.x$14.min, (f$15.s0.x$14.max + -3))

  a_copy[i].max: (min(((((f$15.s0.x$14.max - f$15.s0.x$14.min)/4)*4) + f$15.s0.x$14.min), (f$15.s0.x$14.max + -3)) + 3)
  a[i].max: f$15.s0.x$14.max
Test division of uint32x4

  a_copy[i].min: (min(f$16.s0.x$15.min, (f$16.s0.x$15.max + -3)) + 0)
  a[i].min: min(f$16.s0.x$15.min, (f$16.s0.x$15.max + -3))

  a_copy[i].max: (min(((((f$16.s0.x$15.max - f$16.s0.x$15.min)/4)*4) + f$16.s0.x$15.min), (f$16.s0.x$15.max + -3)) + 3)
  a[i].max: f$16.s0.x$15.max

  a_copy[i].min: (min(f$16.s0.x$15.min, (f$16.s0.x$15.max + -3)) + 0)
  a[i].min: min(f$16.s0.x$15.min, (f$16.s0.x$15.max + -3))

  a_copy[i].max: (min(((((f$16.s0.x$15.max - f$16.s0.x$15.min)/4)*4) + f$16.s0.x$15.min), (f$16.s0.x$15.max + -3)) + 3)
  a[i].max: f$16.s0.x$15.max
Test division of int8x4

  a_copy[i].min: (min(f$17.s0.x$16.min, (f$17.s0.x$16.max + -3)) + 0)
  a[i].min: min(f$17.s0.x$16.min, (f$17.s0.x$16.max + -3))

  a_copy[i].max: (min(((((f$17.s0.x$16.max - f$17.s0.x$16.min)/4)*4) + f$17.s0.x$16.min), (f$17.s0.x$16.max + -3)) + 3)
  a[i].max: f$17.s0.x$16.max

  a_copy[i].min: (min(f$17.s0.x$16.min, (f$17.s0.x$16.max + -3)) + 0)
  a[i].min: min(f$17.s0.x$16.min, (f$17.s0.x$16.max + -3))

  a_copy[i].max: (min(((((f$17.s0.x$16.max - f$17.s0.x$16.min)/4)*4) + f$17.s0.x$16.min), (f$17.s0.x$16.max + -3)) + 3)
  a[i].max: f$17.s0.x$16.max
Test division of int16x4

  a_copy[i].min: (min(f$18.s0.x$17.min, (f$18.s0.x$17.max + -3)) + 0)
  a[i].min: min(f$18.s0.x$17.min, (f$18.s0.x$17.max + -3))

  a_copy[i].max: (min(((((f$18.s0.x$17.max - f$18.s0.x$17.min)/4)*4) + f$18.s0.x$17.min), (f$18.s0.x$17.max + -3)) + 3)
  a[i].max: f$18.s0.x$17.max

  a_copy[i].min: (min(f$18.s0.x$17.min, (f$18.s0.x$17.max + -3)) + 0)
  a[i].min: min(f$18.s0.x$17.min, (f$18.s0.x$17.max + -3))

  a_copy[i].max: (min(((((f$18.s0.x$17.max - f$18.s0.x$17.min)/4)*4) + f$18.s0.x$17.min), (f$18.s0.x$17.max + -3)) + 3)
  a[i].max: f$18.s0.x$17.max
Test division of int32x4

  a_copy[i].min: (min(f$19.s0.x$18.min, (f$19.s0.x$18.max + -3)) + 0)
  a[i].min: min(f$19.s0.x$18.min, (f$19.s0.x$18.max + -3))

  a_copy[i].max: (min(((((f$19.s0.x$18.max - f$19.s0.x$18.min)/4)*4) + f$19.s0.x$18.min), (f$19.s0.x$18.max + -3)) + 3)
  a[i].max: f$19.s0.x$18.max

  a_copy[i].min: (min(f$19.s0.x$18.min, (f$19.s0.x$18.max + -3)) + 0)
  a[i].min: min(f$19.s0.x$18.min, (f$19.s0.x$18.max + -3))

  a_copy[i].max: (min(((((f$19.s0.x$18.max - f$19.s0.x$18.min)/4)*4) + f$19.s0.x$18.min), (f$19.s0.x$18.max + -3)) + 3)
  a[i].max: f$19.s0.x$18.max
Success!

mpicxx -std=c++11  -g -fno-omit-frame-pointer -fno-rtti -Wall -Werror -Wno-unused-function -Wignored-qualifiers -Wno-comment -Wsign-compare -rdynamic -O3 /home/psuriana/distributed-halide/test/correctness/dynamic_reduction_bounds.cpp -Iinclude -I/home/psuriana/distributed-halide/non-linear-FM/src/ -Lbin -lHalide -L/usr/lib/llvm-3.5/lib  -lz -lpthread -lffi -ledit -ltinfo -ldl -lm  -lpthread -ldl -lz -o bin/correctness_dynamic_reduction_bounds -L/home/psuriana/distributed-halide/non-linear-FM/bin/ -lnfm -L/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib -lisl -lgmp
cd bin/build/tmp ; LD_LIBRARY_PATH=:/home/psuriana/distributed-halide/bin:/home/psuriana/distributed-halide/non-linear-FM/bin/:/home/psuriana/distributed-halide/non-linear-FM/isl-0.15/release/lib /home/psuriana/distributed-halide/bin/correctness_dynamic_reduction_bounds
